"Prednasejici","Nazev","Bio","Anotace","Url","YouTube"
"Pavel Košťál ","🎤 Jak nevyhořet v práci","","Přednášející Pavel Kříž představuje technologie pro domácí automatizaci, se zaměřením na KNX, kterou považuje za nejlepší a nejvhodnější sběrnici. Na začátku rozděluje automatizační technologie na drátové a bezdrátové, přičemž vyzdvihuje výhody drátových řešení jako KNX, a také zmiňuje další možnosti jako Loxone a průmyslové PLC systémy. Vysvětluje, že bezdrátové technologie se hodí spíše pro situace, kdy nelze snadno instalovat kabely, například při dodatečných úpravách elektroinstalace.<br><br>Dále Pavel popisuje technologie, které má doma nainstalované, včetně KNX, Zigbee a Wi-Fi, a zmiňuje, že kombinace různých technologií může vést k tzv. „zoologické zahradě“, kde je potřeba integrovat více systémů. Doporučuje použití platformy Home Assistant pro integraci těchto technologií.<br><br>Věnuje se i historii KNX sběrnice, která se dříve nazývala Instabus a EIB. Uvádí, že KNX podporuje různá média pro přenos dat, například Twisted pair (drát), Powerline, bezdrátové a ethernetové připojení. Přednášející popisuje základní technické parametry sběrnice KNX, například napětí a způsob komunikace mezi zařízeními.<br><br>Pavel zdůrazňuje výhody KNX, včetně otevřeného standardu, široké podpory výrobců a nezávislosti jednotlivých komponent, které fungují autonomně. Systém také nevyžaduje centrální server, což zajišťuje jeho spolehlivost. Upozorňuje však na nevýhody, jako je vysoká cena komponent a potřeba tahání nových kabelů, což je vhodné především pro novostavby a rozsáhlé rekonstrukce.<br><br>Zmiňuje možnosti snižování nákladů nákupem komponent na eBay nebo použitím čínských zařízení, přičemž si dává pozor na jejich bezpečnost. Přednášející také zmiňuje, že konfigurační software pro KNX není zdarma, ale lze ho získat levněji prostřednictvím školení nebo nákupu menších licencí.<br><br>Na závěr Pavel předvádí základní demo KNX systému, kde propojuje zdroj sběrnice s aktuátory a ukazuje, jak zařízení reagují na změny v nastavení. Vysvětluje, že si uživatelé mohou vytvořit vlastní zařízení pro KNX, například flashováním čínských komponentů nebo pomocí vlastního softwaru.","","https://www.youtube.com/watch?v=pDbPzIvMAJo"
"Filip Sedlák ","🎤 Jak jsem dělal pohovor do Google","https://mastodonczech.cz/@krab","V tomto videu přednášející popisuje své zkušenosti s pracovním pohovorem do velké technologické firmy, konkrétně Google, a následným rozhodováním o přestěhování do zahraničí. Původně chtěl mluvit o problémech s nedostatkem integerů v systému Media Board, ale nakonec předává slovo kolegovi Michalovi, který je na toto téma více kvalifikovaný. Poté se zaměřuje na proces pracovního pohovoru do Googlu, který pro něj byl velmi odlišný od běžných pohovorů, na které byl zvyklý.<br><br>Popisuje, jak byl doporučen na pozici svým známým, který odcházel z Googlu, a jak se rozhodl podat přihlášku. Poté, co neuspěl u jedné z prvních pozic, se mu nakonec ozval rekrutér. Proces zahrnoval několik telefonátů a následně bylo naplánováno několik kol pohovorů. Jedním z klíčových momentů byl pohovor zaměřený na algoritmy a programování, během kterého dostal úkoly typu hledání slov v osmisměrce a práci s logy.<br><br>Další část pohovoru se zaměřovala na návrh systému, kde byl požádán o návrh platformy podobné Street View, kterou by mohli využívat taxikáři. Zde musel navrhnout, jak by se data sbírala, ukládala a přenášela, a jaké technické vybavení by bylo potřeba. <br><br>Z pohledu přednášejícího byl celý proces náročný, ale zajímavý. Nejenže musel prokázat své technické znalosti, ale také své schopnosti vést tým a řešit konflikty, což bylo součástí pohovoru zaměřeného na vedení lidí.<br><br>Na závěr videa přednášející zmínil, že jeho rodina už delší dobu uvažovala o přestěhování do zahraničí, a proto tuto pracovní nabídku bral jako příležitost získat nové zkušenosti a zlepšit své dovednosti. Plánuje se přestěhovat do Irska, kde by mohl získat novou pracovní pozici a zároveň obnovit své kapitánské papíry. V závěru také vyjádřil svůj obdiv k projektu Media Board a doporučil volné místo v týmu pro ty, kteří se chtějí věnovat DevOps a infrastruktuře.<br><br>Filip doporučoval knihu https://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/0984782850","https://docs.google.com/presentation/d/1vAPAkLOSTeKivvjCpFT8fGvTJnNMqksJ4q5yKX8FkQ0/edit?usp=sharing","https://www.youtube.com/watch?v=q4gQm4jojJQ"
"Jan Horalík","🎤 Prompt Injection","","Přednášející, Honza Horalík, se ve svém videu zabývá problematikou **prompt injection** a **jailbreakingu** v systémech generativní umělé inteligence (AI). Prompt injection je útok, kdy útočník pomocí běžného uživatelského vstupu manipuluje systém tak, aby se choval v rozporu s instrukcemi vývojáře. Tento útok cílí na tzv. *systémový prompt*, což je sada pokynů, které má AI následovat.<br><br>Honza vysvětluje, že při prompt injection útočník často zadává speciální příkazy, které mohou vést k tomu, že AI provede nechtěné operace, například ignoruje původní pokyny a vypíše jinou odpověď. Podobný typ útoku je **jailbreaking**, který cílí přímo na ochranné mechanismy zabudované do modelu umělé inteligence, a obchází tak omezení, která mají zabránit AI v poskytnutí citlivých informací.<br><br>Ve videu jsou ukázány různé příklady těchto útoků. Například útočník může vložit do textu větu, která přikáže systému ignorovat původní pokyny a vykonat jinou akci, například jen vypsat ""Haha"" místo toho, aby překládal text. Dalším příkladem je použití prompt injection k manipulaci s textem e-mailu, kdy AI místo shrnutí zobrazí nepravdivé informace. Prompt injection může mít závažné důsledky, pokud AI má přístup k citlivým datům, jako jsou e-maily a dokumenty, což je případ systému Google Bard.<br><br>Přednášející také popisuje **hierarchii instrukcí**, která má pomoci při obraně proti prompt injection. Tato hierarchie stanovuje prioritní pořadí jednotlivých vstupů, aby se zamezilo konfliktům mezi nimi a minimalizovalo riziko útoku.<br><br>Závažnost útoku jailbreaking je podle Horalíka vyšší, protože umožňuje obejít vestavěné ochrany AI. I když jailbreaking může vést k tomu, že AI poskytne zakázané informace (například návod na výrobu bomby), většina těchto útoků nezahrnuje přístup k citlivým uživatelským datům, což zmenšuje jejich nebezpečí.<br><br>Nakonec Honza zmiňuje švýcarský startup **Lera**, který se zaměřuje na detekci prompt injection útoků. Lera nabízí službu Lera Guard, která umožňuje vývojářům posílat AI prompty k analýze a detekci potenciálních bezpečnostních rizik. Firma také nabízí výukovou hru Gandalf, kde se hráči vžijí do role hackerů a zkouší provádět prompt injection útoky.<br><br>Honza závěrem zdůrazňuje, že i když se vylepšují metody obrany proti prompt injection a jailbreaking útokům, jde o komplexní problém, protože systémy generativní AI pracují s přirozeným jazykem, který je velmi složitý a těžko se validuje.","https://docs.google.com/presentation/d/1etgJfsgDy_LR3eNW1ArESDER-lq1Fasqyx7TH6Tcmog/edit?usp=sharing","https://www.youtube.com/watch?v=zHT_zDYWV20"
"Milan Lempera","🎤 Rok s elektromobilem","https://www.linkedin.com/in/milanlempera/","Přednášející, Milan Lempera, sdílí své zkušenosti s elektromobilem, který používá už více než rok. Důvodem k pořízení nového vozu byla nefunkčnost jeho staré Octavie, a zároveň touha po moderní, technologicky zajímavé hračce. Jako geek, který žije na vesnici v rodinném domě s fotovoltaikou, si vybral šedý Volkswagen ID.3, který splňoval požadavky na malé, nenápadné auto. Vozidlo bylo koupeno jako dvouleté s nájezdem 12 000 km a během 16 měsíců s ním najel dalších 21 000 km.<br><br>Přednášející popisuje technické parametry vozu, včetně výkonu 150 kW, zrychlení na 7 vteřin a dojezdu, který se papírově uvádí na 408 km. Ve skutečnosti se dojezd liší v závislosti na způsobu jízdy a podmínkách, reálný dojezd při nabíjení na 80 % je mezi 280 a 320 km. Baterii se snaží udržovat mezi 20 % a 80 %, což znamená, že nabíjí jednou týdně, někdy dvakrát, většinou doma z fotovoltaiky.<br><br>Přednášející zmiňuje, že spotřeba elektromobilu je ovlivněna několika faktory, zejména rychlostí a venkovní teplotou. Spotřeba se pohybuje od 12,5 kW při klidné jízdě až po vyšší hodnoty při jízdě na dálnici. Také upozorňuje na vliv vytápění a klimatizace, které mohou výrazně ovlivnit celkovou spotřebu.<br><br>Co se týče nabíjení, Milan používá jak domácí nabíjení, tak veřejné nabíječky, přičemž preferuje nabíječky od společnosti E.ON. Nabíjení doma na 80 % trvá přibližně 3,5 hodiny a při využití fotovoltaiky je provozní cena velmi nízká. Na cestách je často výhodné naplánovat nabíjení s přestávkou na oběd, protože rychlonabíjení na veřejných stanicích trvá kolem 30 minut.<br><br>Přednášející sdílí i své zkušenosti s delšími cestami, které původně neplánoval. Díky zájmu svého syna o elektromobily však absolvoval výlet až do Berlína a k Baltskému moři. Cesty zvládali bez větších problémů, i když na dálnicích s neomezenou rychlostí se ukázalo, že elektromobil není ideální pro rychlé jízdy.<br><br>Celkově hodnotí auto jako skvělou volbu pro druhý vůz do rodiny. Vyzdvihuje jednoduchost ovládání, které usnadňuje každodenní používání, a moderní technologie jako head-up displej, který zlepšuje orientaci v provozu a zpřehledňuje informace při jízdě.","https://docs.google.com/presentation/d/1DjGQOEuifkzH4lVNIA1wUB5S0-N43iNjK8XBSdCIZ28/edit?usp=sharing","https://www.youtube.com/watch?v=4EM1kx7Nu6Y"
"Miloš Havránek","🎤 L. Casei Securitas","https://www.linkedin.com/in/miloshavranek","Přednášející Miloš Havránek v úvodu svého videa oznamuje, že téma jeho prezentace se bude týkat bezpečnosti a představil svůj vlastní termín ""L. Casei Securitas"". Tento termín je inspirován reklamou z jeho mládí, která slibovala lepší zdraví prostřednictvím konzumace konkrétního produktu, přičemž byla tato reklama zveličená. Stejně jako v reklamě i v oblasti bezpečnosti existují podobná přehánění a sliby, které nejsou vždy realistické. Podle přednášejícího je důležité používat zdravý selský rozum, a to jak při vývoji, tak v oblasti bezpečnosti, kde mnohé firmy sledují best practices, ale často přehlížejí klíčové slepé body.<br><br>V další části prezentace Havránek ukazuje pyramidu, kterou generoval pomocí ChatGPT. Zelené body znázorňují oblasti, na které se firmy zaměřují a sledují je, žluté body představují potenciální rizika, která by se neměla opomíjet, a červené oblasti jsou ta místa, která firmy zatím neřeší, ale mohou být problémová. Tento model slouží k ilustraci rozdílných přístupů k bezpečnosti.<br><br>Havránek dále upozorňuje na to, že firmy by si měly dávat pozor na to, co do svých systémů přidávají. Většina školení se zaměřuje na známé problémy jako SQL injection, ale pouze malý podíl kódu je skutečně autorský, zbytek tvoří závislosti z externích knihoven, o kterých vývojáři často nemají dostatek informací. Jako příklad uvádí knihovny v JavaScriptu, kde může jedna knihovna nahradit jen několik řádků kódu, což však při jejím odstranění může způsobit vážné problémy.<br><br>V oblasti bezpečnosti vyzdvihuje důležitost používání repozitory managerů a kontroly podpisů balíčků, což pomáhá zamezit situacím, kdy jsou balíčky nahrazeny jinými verzemi bez vědomí uživatele. Na závěr zmiňuje problematiku public cloudů, jako je GitHub, kde mohou tokeny s neomezeným přístupem představovat riziko pro firmu.<br><br>Celkově se Havránek zaměřuje na praktické rady a upozornění ohledně bezpečnosti, klade důraz na pečlivé ověřování závislostí a používání zdravého rozumu při implementaci bezpečnostních opatření.","https://docs.google.com/presentation/d/1e2b5doe5V0wi0DlxOmBCOKHLKwsu4Q6riUDtTpqEX7o/edit","https://www.youtube.com/watch?v=NJIUXK3lS-o"
"Jiří Pinkas","🎤 DDD + Spring Modulith","https://cz.linkedin.com/in/jirkapinkas","Přednášející začíná tím, že vítá publikum a oznamuje, že bude mluvit o **Domain-Driven Designu (DDD)** a jeho spojení s **Springem**. DDD je koncept, který již používá nějakou dobu a jeho cílem je pomoci s architekturou aplikací, zejména s problémy, které přináší tradiční **monolitické aplikace**.<br><br>Na začátku popisuje typickou monolitickou aplikaci, kde jsou všechny entity a logika aplikace uspořádány do jednoho velkého balíčku, což může vést k **„špagetovému monstru“** – neudržitelné a chaotické struktuře, která zpomaluje vývoj. Tento přístup může být zpočátku efektivní, ale s časem se zvyšuje komplexita a s každou změnou může docházet k řetězovým chybám, což může vývojáře frustrovat a demotivovat.<br><br>Přednášející upozorňuje na dvě základní cesty, jak se vypořádat s těmito problémy: **mikroservisy** a **modulární monolit**. U mikroservis varuje, že **granularita** (velikost jednotlivých služeb) je zásadní, neboť příliš malá granularita může vést k extrémní komplexitě, kterou je těžké spravovat. Naopak modulární monolit je monolitická aplikace, která je navržena modulárně, což usnadňuje případné oddělení částí aplikace do samostatných mikroservis.<br><br>DDD nabízí principy, které pomáhají vyhnout se problémům spojeným s monolitickými a špatně navrženými mikroservisními aplikacemi. Tyto principy zahrnují **modulární strukturu**, **bohaté doménové modely** (Rich Domain Models) a práci s **Bounded Contexts** – logickými oddíly aplikace, které omezují šíření změn. Zvláštní pozornost věnuje **agregátům** v DDD, které slouží jako hranice konzistence a logiky v rámci aplikace a usnadňují práci s transakcemi a testováním.<br><br>Dále popisuje novinku ve Spring ekosystému – **Spring Modulith**, který implementuje DDD a jeho best practices do Spring aplikací. Tento modul zajišťuje, že jednotlivé moduly aplikace zůstávají oddělené a že mezi nimi nemůže docházet k nekontrolovanému volání metod. Modul také podporuje **doménové události** (domain events), které umožňují odděleným částem aplikace komunikovat mezi sebou, aniž by byly pevně svázány.<br><br>Přednášející zdůrazňuje, že DDD není vhodný pro každou aplikaci. Pokud je aplikace jednoduchá a neobsahuje složitou **byznys logiku**, může být jednodušší použít **anemický model**. Avšak pro aplikace s komplexní logikou doporučuje přejít na **bohatý doménový model**, aby se předešlo budoucím problémům s udržitelností kódu.<br><br>Na závěr shrnuje výhody používání DDD a Spring Modulith a zmiňuje, že s tímto přístupem je možné vytvářet aplikace, které jsou modulární, dobře škálovatelné a udržitelné v dlouhodobém horizontu. Pokud vývojáři doposud používali anemický model a mají složitou byznys logiku, měli by zvážit přechod na DDD, aby se vyhnuli neudržitelnému kódu, který přirovnává ke „špagetovému monstru“.<br><br>Poznámky z publika:<br><br>L. Račanský: ta kniha je strašná, nečtěte ji! (shrnutí na InfoQ https://www.infoq.com/minibooks/domain-driven-design-quickly/)<br>Tahle je lepší (Lukáš Křečan) https://www.amazon.com/Learning-Domain-Driven-Design-Aligning-Architecture/dp/1098100131","https://docs.google.com/presentation/d/1GtbMVHhNK7DrKEw4cKfzkKqt7AKRV2OWIUK-j-dEXPY/edit?usp=sharing","https://www.youtube.com/watch?v=_VX1UFATFk4"
"Luboš Račanský","🎤 Talisman","https://witter.cz/@banterCZ","Přednášející, Luboš Račanský, se v úvodu věnuje tématu bezpečnosti a uživatelské přívětivosti, které často stojí proti sobě. Přirovnává bezpečnostní koncepty k černé magii, kterou se pokusí objasnit. Zmiňuje, že většina uživatelů používá komplikovaná hesla, která jsou z hlediska zapamatovatelnosti a bezpečnosti nevhodná, a doporučuje používat spíše náhodně zvolená slova. Varuje před používáním jednoho hesla na více službách a zdůrazňuje výhody password manažerů, které generují unikátní hesla pro každou službu.<br><br>Dále mluví o dvoufaktorové autentizaci pomocí SMS, která není zcela bezpečná kvůli riziku malwaru a sociálního inženýrství. Doporučuje přihlašování bez hesel za použití softwarových nebo hardwarových tokenů. Zmiňuje technologie WebAuthn a FIDO2, které poskytují bezpečnější autentizaci.<br><br>Račanský vysvětluje, jak funguje asymetrická kryptografie v rámci WebAuthn – uživatel si vygeneruje veřejný a privátní klíč, přičemž veřejný klíč je uložen na serveru. K autentizaci dochází ověřením podpisu privátním klíčem.<br><br>Přednášející dále představuje konkrétní hardwarový autentikátor, který jeho tým vyvinul. Zmiňuje, že bankovnictví je silně regulované odvětví a popisuje specifikace směrnic PSD2 a PSD3, zejména co se týče silné autentizace uživatele a tzv. Dynamic Linking, což je svázání autentizačního kódu s konkrétní transakcí.<br><br>V technické části prezentace Račanský popisuje klíčové vlastnosti vyvinutého autentikátoru – je vybaven Secure Elementem od firmy Infineon, nevyžaduje baterii, a funguje bez nutnosti instalace dodatečného softwaru. Autentikátor má displej pro zobrazení potvrzované transakce a klávesnici pro zadání PINu.<br><br>V závěru popisuje praktické využití autentikátoru, kdy uživatel potvrzuje platbu zadáním čísla účtu, částky a měny. Poté autentikátor zobrazí detaily transakce a po zadání PINu dojde k potvrzení. Račanský zdůrazňuje, že autentikátor je již používán ve dvou zahraničních bankách.<br><br>Přednášku zakončuje výzvou, aby si diváci autentikátor vyzkoušeli.<br><br>Demo stránka: https://pa-dev-int-weu-stable-fido2-demo-app-01.azurewebsites.net/fido2-demo/login<br>Manuál: https://www.wultra.com/manuals/hardware-authenticator<br>Getting Started with WebAuthn: https://www.youtube.com/watch?v=yccBhpdJjJc","https://drive.google.com/file/d/1Y0jf3tYs3yv6qJ__QW7WA8orRGsQeyf9/view?usp=drive_link","https://www.youtube.com/watch?v=DUu7RUD00qk"
"Filip Staffa","🎤 React server components","","Ve videu přednášející Filip Štafa představuje React Server Components (RSC) a vysvětluje, jak tento nový přístup zjednodušuje vývoj webových aplikací. Na začátku popisuje vývoj jednoduché aplikace v různých obdobích. V roce 1995 by vývojáři načetli data z databáze a po stisknutí tlačítka by stránka znovu načetla veškerý obsah. V roce 2005 už používají JavaScript a AJAX, takže pouze část obsahu se načítá asynchronně, čímž se zlepší uživatelský zážitek. V roce 2015 už nastupují velké JavaScriptové frameworky jako React, což vede k větší komplexitě na straně klienta, kde musí vývojáři řešit stavovou logiku, loading screeny a další UI problémy.<br><br>Filip upozorňuje, že moderní React aplikace často trpí problémy s uživatelskou přívětivostí kvůli častému zobrazování loading screenů. S nástupem React Server Components se však vývoj vrací ke konceptu, kdy většina výpočtů a renderování probíhá na serveru. Data se načtou a zobrazí najednou, což zjednodušuje uživatelskou interakci a zlepšuje výkon aplikace. Tento přístup je výhodný tím, že eliminuje potřebu složitého klientského stavu a načítání dat asynchronně. Komponenty jsou vykreslovány na serveru a výsledkem je čisté HTML, které se doručí uživateli bez nutnosti následné klientské hydratace.<br><br>Přednášející vysvětluje, že RSC jsou součástí Reactu 19, který je zatím v beta verzi, a pro jejich použití je potřeba meta framework, jako je Next.js. Tento framework podporuje RSC od verze 13, což je zhruba dva roky. Výhodou tohoto přístupu je menší množství kódu a jednodušší vývojářská práce, protože API vrstvy a klientské stavové managementy se stávají méně důležitými. Také zmiňuje, že streamování dat, které React Server Components umožňuje, přináší efektivnější zpracování díky postupným aktualizacím zobrazení na stránce, což může být rychlejší než tradiční přístupy.<br><br>V závěru Filip Štafa zdůrazňuje, že hlavní výhodou React Server Components je zjednodušení vývoje tím, že vývojáři nemusí řešit klientský stav a složité UI problémy, zatímco nevýhodou je nutnost používat Next.js, který implementuje dvě různé verze Reactu – jednu pro server a jednu pro klienta.","https://docs.google.com/presentation/d/1xukBVbrc6piYvDD_lllap9GmMxBucU4n4plrO7b5Two/edit?usp=sharing","https://www.youtube.com/watch?v=bzupbjyV-NU"
"Vojtěch Růžička","🎤 Spring AI","https://www.vojtechruzicka.com/about/","Přednášející Vojta Růžička v tomto videu popisuje základní principy a výhody frameworku Spring, se zaměřením na jeho využití v oblasti umělé inteligence (AI). Vysvětluje, že Spring poskytuje vrstvu abstrakce nad konkrétními implementacemi, což umožňuje snadné přepínání mezi různými platformami bez nutnosti měnit kód aplikace. Tato flexibilita je klíčová zejména v rychle se měnícím prostředí AI, kde neustále vznikají nové funkce a technologie.<br><br>Dále zmiňuje, že Spring zjednodušuje práci s daty díky unifikovanému API, které vývojářům umožňuje pracovat s různými typy dat, jako jsou text, obrázky, audio, nebo vlastní strukturovaná data. Zdůrazňuje také schopnost Springu generovat data ve formátu JSON nebo jako instance tříd v Javě, což zjednodušuje jejich další strojové zpracování.<br><br>V části věnované pokročilým funkcím popisuje koncept ""function calling"", který umožňuje Springu využívat externí API ke zpracování dotazů, které nejsou pokryty interním modelem. Příkladně popisuje scénář, kdy Spring získá aktuální informace o filmech promítaných v Praze pomocí externího API a integruje je s vlastním kontextem.<br><br>Další část videa se zaměřuje na výhody vektorových databází, které Spring umí využívat pro efektivní zpracování velkých objemů dat. Vektorové databáze umožňují rychlé vyhledávání na základě podobnosti, což je výhodné například při dotazech na nejednoznačné nebo příbuzné informace.<br><br>Na závěr přednášející ukazuje, jak snadné je s frameworkem Spring pracovat a jak abstrahuje od složitých implementačních detailů, což umožňuje i méně zkušeným vývojářům snadno vytvářet výkonné aplikace.","https://docs.google.com/presentation/d/1V0S-XLpO79DJUz9FeOLH2YzY7D5eFlNiZSiq4mEJaJA/edit#slide=id.g3042c971e74_0_0","https://www.youtube.com/watch?v=ksk_B77Nf_U"
"Jan Novotný ","🎤 Fly with Java Recorder","https://www.linkedin.com/in/jannovotny/","Přednášející v tomto videu vysvětluje, co je to **Java Flight Recorder (JFR)**, a proč jde o užitečný nástroj pro analýzu aplikací běžících v JVM. Na začátku upozorňuje, že mnoho lidí o JFR ví jen povrchně, ale neznají jeho plný potenciál a možnosti. **Java Flight Recorder** je součástí JVM od JDK 11, kdy se stal open-source. Původně byl součástí JVM JRockit a je navržen tak, aby mohl běžet s minimální zátěží i v produkčním prostředí.<br><br>JFR zaznamenává události, které probíhají ve virtuálním stroji, s minimální zátěží (1-2 % výkonu), a ukládá je do souboru, který lze později analyzovat. Nahrávání probíhá neustále, přičemž staré záznamy se přepisují, takže se jedná o ""lightweight"" řešení, které je možné mít zapnuté nepřetržitě. Tento nástroj je vhodný jak pro analýzu výkonu, tak pro detekci problémů, jako jsou **memory leaky** či **nekonečné smyčky**.<br><br>**Přednášející** zmiňuje, že JFR je vhodný pro **post-mortem analýzy** pádů aplikací – pokud Java spadne, záznamy z JFR mohou poskytnout informace o stavu JVM těsně před pádem. Zajímavou funkcionalitou je i možnost vytvářet vlastní události, což umožňuje sledovat specifické události, které mohou být důležité pro aplikaci.<br><br>Využití JFR je také skvělé, když vývojář nemá přístup k zákazníkově infrastruktuře – zákazník může snadno vytvořit JFR záznam, který následně pošle vývojáři k analýze, aniž by bylo potřeba přímého přístupu k serveru. Zmíněná je také možnost **streamování** událostí, kde lze v reálném čase monitorovat to, co se v JVM děje, a filtrovat relevantní informace.<br><br>Dále je zmiňována **Java Mission Control** – nástroj pro analýzu JFR záznamů, který je sice komplexní, ale poskytuje obrovské množství dat o tom, jak JVM funguje. Přednášející ukazuje příklady, jak sledovat různé metriky, jako je aktivita garbage kolektoru, chování vláken nebo výskyt výjimek. <br><br>Jednou z výhod JFR je i **možnost programového přístupu** k událostem, což znamená, že vývojáři mohou integrovat záznam JFR přímo do svých aplikací a vytvářet vlastní nahrávací mechanizmy pro sledování specifických částí systému.<br><br>Přednášející na závěr shrnuje, že JFR je neocenitelným nástrojem pro ladění aplikací, zlepšení výkonu a detekci problémů, zejména v produkčním prostředí, kde jiné metody mohou být příliš nákladné nebo nepraktické.","https://novoj.github.io/reveal.js/jopenspace2024.html","https://www.youtube.com/watch?v=PLnvKFXs_3c"
"Lubomir Petera","🎤 Retrospektiva","","Přednášející začíná prezentaci tím, že si pro letošní rok obtížně vybíral téma. Přemýšlel o tom, co mu dává tato konference, a uvědomil si, že ho loňská konference velmi inspirovala. Rozhodl se díky ní zhubnout, což je téma, kterému se chce věnovat v rámci prezentace, ale ne na celou dobu. Proto se podíval i na historii konference a zaměřil se na videa, která ho zaujala, a která bude také komentovat.<br><br>Přednášející se rozhodl přidat i technické téma – retrospektivu v agilním vývoji. Popisuje, jak retrospektivy probíhají v jejich týmu po každém dvoutýdenním sprintu. Jejich retrospektiva zahrnuje dvě základní otázky: co se líbilo a co ne. Hlavní přínos retrospektivy je, že poskytuje prostor pro vyjádření těm, kteří se běžně nevyjadřují. Tímto způsobem mohou sdělit své připomínky, aniž by museli reagovat v průběhu sprintu. Moderace retrospektivy se střídá mezi členy týmu, což pomáhá zlepšit komunikaci a uvědomění si problému.<br><br>Zmiňuje dvě překážky, proč lidé nechtějí retrospektivy dělat: nechtějí poukazovat na problémy a vidí to jako ztrátu času oproti programování. Přednášející zdůrazňuje důležitost komunikace a řešení drobných problémů.<br><br>Následně popisuje, kdy retrospektivu nedělat, například v průběhu sprintu. Místo toho by měla probíhat až po dokončení práce na projektu, aby tým nepřerušoval rozpracované činnosti.<br><br>Přednášející pak přechází k retrospektivě v osobním životě. Dívá se na předchozí videa z Open Space a zdůrazňuje pocit nostalgie, který retrospektiva přináší. Zmiňuje několik přednášek, které ho zaujaly, včetně technologií, které zastarávají, a jak sdílet znalosti ve firmě.<br><br>Dále vypráví o své osobní zkušenosti s hubnutím, kterou zahájil po loňské konferenci. Popisuje, jak postupně zhubnul, přibral a opět zhubnul. Snažil se také běhat, což mu pomohlo cítit se lépe, i když přímo hubnutí nepřineslo očekávané výsledky.<br><br>Na závěr se přednášející věnuje krátce i otázce diskuse na internetu a důležitosti pojmenovávání pocitů. Přestože mu došel čas, uzavírá prezentaci několika dalšími poznámkami, a tím celou přednášku uzavírá.","","https://www.youtube.com/watch?v=8FN09qA_0gY"
"Kamil Ševeček","🎤 Zero Sugar","","Přednášející Kamil Ševeček ve své přednášce probírá téma sladidel a omezování cukru, které považuje za kontroverzní. V úvodu zmiňuje svůj vztah k sladkému čaji, kde si dává mnoho kostek cukru, ale postupně přešel ke sladidlům. Hlavní důvod jeho přechodu na sladidla bylo podráždění žaludku a pálení žáhy, které mu způsobovalo nadměrné množství cukru. <br><br>Ševeček vysvětluje, že sladidla nejsou jedovatá, jak si někteří myslí, a jsou schválena k použití v potravinách. Mezi běžně používanými sladidly zmínil sacharin, aspartam, acesulfam K a sukralózu, přičemž každé z nich má své specifické vlastnosti a některá jsou vnímána jako kontroverzní kvůli starším studiím o jejich účincích. Například sacharin byl spojován s rakovinou močového měchýře u potkanů, ale to se nepotvrdilo u lidí. Aspartam zase může v těle produkovat metanol, ale v malých množstvích, která nejsou považována za škodlivá.<br><br>Sukralóza je podle přednášejícího nejbezpečnější a nejpodobnější cukru. Vysvětlil také rozdíly mezi přírodními sladidly, jako je stévie, a zmínil, že sukralóza a stévie jsou ideální pro pečení, i když mají některé zvláštní vlastnosti. Například pečivo se sukralózou rychle vysychá, protože neabsorbuje vodu jako běžný cukr. Dalším zajímavým sladidlem je eritritol, který má chladivý efekt díky endotermické reakci.<br><br>V druhé části přednášky Ševeček rozebírá cukry-alkoholy, jako jsou maltitol, sorbitol, xylitol a eritritol. Vysvětluje, že tyto látky nelze metabolizovat, což znamená, že neobsahují kalorie, ale některé z nich mohou způsobit zažívací potíže. Eritritol je z nich nejbezpečnější a má zajímavý chladivý efekt. Přesto zdůrazňuje, že tyto cukry nejsou vhodné pro lidi, kteří trpí pálením žáhy, protože mají podobný účinek jako běžný cukr.<br><br>Na závěr zmínil L-glukózu, což je forma glukózy, kterou lidské tělo nedokáže metabolizovat. Přestože chutná stejně jako běžná glukóza, nedá se využít jako zdroj energie, což by ji činilo ideálním sladidlem bez kalorií, kdyby byla dostupnější.<br><br>Celkově přednáška zdůrazňuje různé výhody a nevýhody sladidel a jejich roli v moderní stravě. Hlavním argumentem je, že sladidla mohou být bezpečnou náhradou cukru, pokud jsou používána v rozumných množstvích a s ohledem na individuální potřeby a preference.","https://docs.google.com/presentation/d/1gw9-1-7JpieulzRNrkte2SnQtOwsFaYndec0jEomNsk/edit#slide=id.g2d3e48ff1ef_0_0","https://www.youtube.com/watch?v=ITNyJfeL9oc"
"Leoš Přikryl","🎤 Optimalizace domácnosti na spotové ceny elektřiny","https://www.linkedin.com/in/leosprikryl/","Přednášející Leoš Přikryl v tomto videu popisuje, jak doma optimalizuje spotřebu elektřiny na základě spotových cen. Inspirací mu byla zkušenost jeho známé, která tento model využívá. Vysvětluje, že spotové ceny elektřiny jsou určovány denním trhem a mění se v závislosti na nabídce a poptávce. Ceny jsou známé den dopředu a kolísají v průběhu dne, někdy i velmi výrazně.<br><br>Přikryl se snaží svou spotřebu přizpůsobit levnějším časovým úsekům, aby ušetřil, a zároveň s pomocí fotovoltaické elektrárny a baterií prodávat elektřinu v době, kdy je nejdražší. Přednáší o tom, že optimalizace spotřeby má smysl hlavně pro domácnosti s vyšší spotřebou, například když topí elektřinou nebo ohřívají vodu. Pokud má někdo fotovoltaiku, může navíc prodávat elektřinu do sítě.<br><br>Vysvětluje, že pokud se baterie nabije během období nízkých cen, může ji domácnost využívat v době dražší elektřiny. Ideální scénář je ten, kdy domácnost dokáže efektivně spravovat spotřebu i prodej elektřiny. Přednášející zdůrazňuje, že každá domácnost může optimalizovat spotřebu různými způsoby, včetně přesunu používání některých spotřebičů do časů levné energie.<br><br>Přikryl také popisuje, jak spravuje svou domácnost pomocí Home Assistant, kde sleduje řadu ukazatelů a integrací pro řízení fotovoltaiky, tepelného čerpadla a spotřebičů. Ukazuje své dashboardy a sleduje například teploty v místnostech s vysokými tepelnými ztrátami.<br><br>Závěrem přednášející doporučuje řešení od společnosti Delta Green, která nabízí zařízení Teus, jež automatizuje řízení spotřeby. Přikryl to zkoušel sám, ale zjistil, že toto řešení dosahuje podobných výsledků s minimální námahou. Navíc dodává, že Delta Green plánuje do budoucna řídit i spotřebiče a zapojit se do prodeje flexibility pro energetické sítě.","https://docs.google.com/presentation/d/1xk2bZjr_H16P_NBaKTibx-E1dODgjiNG5WSagivHtmQ/edit?usp=sharing","https://www.youtube.com/watch?v=-IwcUtl1j4U"
"Tomucha","🎤 Toki Pona: Jazyk dobra","","Přednášející ve videu vysvětluje základy umělého jazyka Toki Pona, který vytvořila kanadská lingvistka Sonja Langová. Tento jazyk, podobný esperantu, má jen 120 slov a klade důraz na jednoduchost a minimalismus. Hned na začátku popisuje, jak některá slova mají širší významy, například „tok“ znamená nejen mluvit, ale i myslet, a „pona“ znamená jak dobrý, tak i jednoduchý.<br><br>Jazyk Toki Pona nemá komplexní gramatiku a používá jednoduché konstrukce větných členů. Přednášející vysvětluje, že věty jsou strukturovány striktně a například pořadí podmětu, přísudku a předmětu je vždy stejné. V Toki Pona nejsou komplikované hlásky jako „r“ nebo „h“, což usnadňuje jeho výslovnost. Vlastní jména se přepisují do povolené abecedy, a tak třeba jméno ""Tomucha"" se přepisuje jako ""Tomuka.""<br><br>Přednášející dále ukazuje, jak se skládají slova a věty v Toki Pona. Například pro slovo „pivo“ se používá spojení „bláznivá voda“ – „telo nasa“. Také vysvětluje, jak se tvoří otázky a rozkazy pomocí jednoduché úpravy věty, například přidáním slova „seme“ na místo neznámého prvku ve větě.<br><br>Zmíní také, že Toki Pona má vlastní znakovou řeč a písmo, kde každé slovo má svůj symbol nebo emoji. Ukazuje příklad věty „Tomucha pije pivo“, která je v Toki Pona složená do jednoduchých symbolů, a diskutuje o tom, jak se v tomto jazyce tvoří grafické věty.<br><br>Závěrem přednášející dodává, že Toki Pona má své příznivce mezi lingvisty a dalšími nadšenci, a poskytuje několik tipů na webové stránky, kde je možné se jazyk naučit nebo si přečíst překlady slavných děl, například Čaroděje ze země Oz v Toki Pona.","https://docs.google.com/presentation/d/1YzXB9UEiNi6RIlDg987zW6ah0sgjNYYLtuUZ-S7N5S0/edit#slide=id.p","https://www.youtube.com/watch?v=ZW58FuodPRY"
"Jan Vondrouš","🎤 IntelliJ IDEA few advanced debugging features","","Přednášející z firmy elevel představuje několik tipů na používání debuggeru v IntelliJ IDEA. Začíná tím, že ho překvapilo, kolik funkcí debuggeru nevyužíval, a rozhodl se některé z nich ukázat. I když příklady jsou v Kotlinu, všechny ukázané postupy fungují stejně i v Javě.<br><br>První ukazuje možnost restartování metody pomocí funkce *reset frame*, což umožňuje opakované spuštění metody od začátku. Další tip zahrnuje možnost ukončit metodu předčasně a určit, co má vrátit.<br><br>Dále předvádí metodu, která často způsobuje chybu. Pomocí debuggeru ukazuje, jak se vrátit na konkrétní místo v kódu a zkusit jej znovu spustit. K tomu využívá *Jump to Line* plugin, který umožňuje přeskočit na určitou řádku v kódu bez nutnosti znovu spouštět celou aplikaci.<br><br>Další funkcí je *trace point*, která umožňuje sledovat určité body v kódu, aniž by debugger aplikaci zastavil. Přednášející ukazuje, jak lze vyhodnotit proměnné na breakpointu a zalogovat výrazy bez nutnosti používat tradiční `print` výstupy. Výhodou je, že tyto výstupy nejsou součástí kódu, takže je nelze omylem zkompilovat a pushnout do produkce.<br><br>Následující část se zaměřuje na sledování konkrétních vláken (threadů). Přednášející ukazuje, jak lze označit určitý objekt pomocí *mark object* a používat ho ve výrazech nebo podmínkách. Také vysvětluje, jak sledovat objekty v paměti pomocí funkce *show objects in memory*, která zobrazuje všechny instance objektů daného typu a jejich aktuální hodnoty.<br><br>Přednášející pokračuje demonstrací funkce *Stream debugger*, která umožňuje sledovat operace nad streamy v Kotlinu i Javě. Ukazuje, jak pomocí tohoto nástroje lze krokovat jednotlivé transformace nad datovými strukturami.<br><br>V závěrečné části se věnuje vlastním *rendererům*, což jsou vlastní způsoby zobrazení datových struktur v debuggeru. Pomocí anotace *Jetbrains renderer* lze přizpůsobit, jak jsou zobrazeny konkrétní třídy v debuggeru, což může být užitečné při práci na projektech.<br><br>Na závěr přednášející shrnuje hlavní body: instalace *Jump to Line* pluginu, používání *trace pointů* místo `print` výpisů, zapnutí zobrazování návratových hodnot metod, označování objektů pro snadnější sledování a využití *Stream debuggeru* a *Custom renderers*. Dále zdůrazňuje, že sledování paměti během debugování je velmi užitečné.","https://github.com/bugs84/idea-debugging","https://www.youtube.com/watch?v=2KxEIFHLe1g"
"Lukáš Křečan","🎤 Zákony SW architektury","","V tomto videu přednášející hovoří o zákonech softwarové architektury a jeho zkušenostech s rozhodováním v roli softwarového architekta. Na začátku popisuje, jak se často musí rozhodovat mezi několika špatnými možnostmi, což ho zpočátku mrzelo, ale později si uvědomil, že je to normální. Cituje knihu o základech softwarové architektury, která vysvětluje, že všechna rozhodnutí v architektuře jsou kompromisy a že žádné řešení není dokonalé.<br><br>Přednášející vysvětluje, že při navrhování softwaru je nutné brát v úvahu různé požadavky, jako je rychlost, bezpečnost, škálovatelnost nebo jednoduchost. Tyto vlastnosti však často jdou proti sobě – například škálovatelnost může být v rozporu s bezpečností. Proto je důležité si vědomě vybrat, které charakteristiky jsou pro daný projekt prioritní, protože není možné mít všechno.<br><br>Přednášející uvádí příklad firmy, která zvolila jednoduchou architekturu pro rychlou iteraci a vývoj produktu, ale později musela přejít na složitější architekturu s microservices, když firma rostla. Po změně podmínek se však opět vrátila k jednoduššímu řešení. Tím demonstruje, že rozhodování v softwarové architektuře se mění s ohledem na aktuální potřeby a situaci.<br><br>Druhým důležitým zákonem softwarové architektury, který přednášející zmiňuje, je, že „proč“ je důležitější než „co“. Vysvětluje, že při rozhodování je klíčové dokumentovat důvody za každým rozhodnutím, protože to pomáhá nejen vysvětlit zvolená řešení ostatním, ale také usměrňuje případné diskuse a konfliktům se specifikacemi projektu. Doporučuje používat Architecture Decision Records (ADR) jako efektivní nástroj pro dokumentování rozhodovacích procesů a trade-offů, které každé rozhodnutí přináší.<br><br>Přednášející také zdůrazňuje, jak dokumentování důvodů usnadňuje budoucí práci a pomáhá předejít opakovaným diskusím o tom, proč byla konkrétní rozhodnutí učiněna. Uvádí, že při zpětném pohledu na ADR může dokonce objevit lepší alternativy, které nebyly na první pohled zřejmé. Proces dokumentace nutí architekta přemýšlet o různých alternativách a být důsledný při rozhodování.<br><br>Na závěr shrnuje, že je nezbytné si uvědomit, že nemůžeme mít všechny požadované charakteristiky najednou. Je nutné si vybrat, co je v daném projektu prioritou, a následně tyto volby dokumentovat a vysvětlovat.","https://docs.google.com/presentation/d/1N3zPUTr-eB2q34Avn7g-x1Jt7DVaiBWI_XiJgFVyF4w/edit?usp=sharing","https://www.youtube.com/watch?v=k8WL-joze3I"
"Václav Stolín ","🎤 povídání o integračním testování ","https://www.linkedin.com/in/vaclav-stolin/","Přednášející v tomto videu popisuje své zkušenosti a pohled na integrační testování. Na začátku vysvětluje, co integrační testy jsou a proč jsou důležité. Integrační test podle něj testuje aplikaci, která během testování volá externí systém, jako je databáze, HTTP služba nebo messaging systém. Vychází z vlastních zkušeností s aplikacemi postavenými na Spring Bootu, kdy typicky testuje HTTP rozhraní. Při testování se používají různé profily pro mírně odlišné konfigurace, přičemž aplikace by měla být co nejblíže produkčnímu prostředí.<br><br>Dále přednášející popisuje historický přístup k testování s in-memory databázemi, jako je H2, a výhody tohoto přístupu, ale také poukazuje na jeho omezení – například že testování s H2 nemusí být přesné pro produkční databáze, jako je Oracle, kvůli jejich specifikům. Jako řešení tohoto problému doporučuje použití nástrojů jako Testcontainers, které umožňují spuštění Docker image databáze během testu.<br><br>Testcontainers jsou podle přednášejícího vhodné zejména pro testování databází a messaging systémů, ale zmiňuje i výzvy spojené s jejich používáním, například komplikace s údržbou Docker image na build serverech a složitější debugování. <br><br>Dále uvádí příklady práce s Testcontainers v kontextu Spring Bootu, kde pomocí DynamicPropertySource upravuje konfiguraci pro testy s dynamickými porty. Přiznává, že Testcontainers nejsou vždy ideální řešení, zejména pokud je testovaný systém napsán v Javě, a radí zvážit jednodušší alternativy, jako je použití embedded databází či messaging systémů.<br><br>Na závěr zmiňuje vlastní zkušenosti s integračním testováním aplikace s použitím Kafky. Objevil, že místo Testcontainers je pro tento účel vhodnější použít Spring Kafka test s anotací EmbeddedKafka, která umožňuje testování bez nutnosti spouštění Kafky v Dockeru. Toto řešení je podle něj jednodušší a efektivnější, přičemž Spring Kafka test poskytuje i užitečné utility pro práci s daty v Kafce během testování.<br><br>V závěru přednášející zdůrazňuje, že integrační testy jsou důležitou součástí vývoje, doporučuje je pravidelně používat a zvážit různé přístupy podle toho, jaké technologie aplikace používá.","https://docs.google.com/presentation/d/1Dz3IoOa8e8ENW-s3wzTjO3lgnoDL80Ua9Sip1gJl1xs/edit?usp=drivesdk","https://www.youtube.com/watch?v=ub4kWHPaU_E"
"David Ondřich","🎤 Sex? Sex!","https://mastodon.social/@dondcz","Přednášející David Ondřich ve své přednášce rozebírá téma pohlaví a jeho definici z vědeckého pohledu, přičemž se soustředí na současné znalosti a zjištění. Začíná s humorným úvodem o tom, jak se k tématu dostal a jak původně zamýšlený název prezentace zůstal jako finální kvůli kolegům.<br><br>Hlavním tématem je problematika určení pohlaví a jeho komplexita. Přednášející upozorňuje na to, že klasické dělení pohlaví podle pohlavních orgánů, chromozomů nebo sekundárních znaků (prsa, boky, ochlupení) je nedostatečné. Uvádí existenci hermafroditismu, tedy lidí, kteří mají znaky obou pohlaví, nebo chromozomální varianty (jako XXY, XYY a další), které zpochybňují jednoduchou binární definici pohlaví. Zdůrazňuje, že lékařská věda postupně objevuje složitosti pohlaví, včetně intersexuality, která se týká přibližně 1,5 % populace, což může být i více, než se předpokládá.<br><br>Ondřich dále zmiňuje objevy v genetice, jako je identifikace chromozomů X a Y, které tradičně určují biologické pohlaví. Nicméně upozorňuje, že ani tento způsob není zcela spolehlivý, protože někteří jedinci s chromozomy XY mohou vypadat a fungovat jako ženy a naopak.<br><br>Dalším tématem přednášky je gender, tedy jak lidé vnímají své vlastní pohlaví. Ondřich vysvětluje, že gender může být odlišný od biologického pohlaví a že moderní věda postupně zkoumá, jak děti vnímají své pohlaví a genderové role. Výzkumy ukazují, že i malé děti mají jasné představy o svém genderu, které nemusí vždy odpovídat jejich biologickému pohlaví.<br><br>Přednášející také zmiňuje, že společnost často klade důraz na vědomí pohlaví kvůli stereotypům, diverzitě a ochraně zranitelných skupin. Poukazuje na to, že bychom měli být opatrní, jakým způsobem informace o pohlaví používáme, protože neexistuje spolehlivý způsob, jak ho jednoznačně určit, jiný než se zeptat dané osoby.<br><br>Ondřich zakončuje přednášku myšlenkou, že určení pohlaví je složitější, než se na první pohled zdá, a že většina situací v běžném životě nevyžaduje přesnou znalost pohlaví druhé osoby. Důležitější je respektovat jednotlivce bez ohledu na to, jaké pohlaví nebo gender si sami přisuzují.","https://docs.google.com/presentation/d/1-FaHoEOYTGCGuU-N3a8Kv5Zs7-cHMHgWWuueAtdNles/edit","https://www.youtube.com/watch?v=KCKdIMOMTWQ"
"Víťa Plšek","🎤 Adventury - My guilty pleasure ","https://www.linkedin.com/in/vitaplsek","Přednášející Víťa Plšek z MoroSystems na začátku videa přiznává, že tentokrát nebude mluvit o technologiích, ale o svých ""guilty pleasures."" Otužování, tantra nebo nikotin nejsou na programu, místo toho se zaměřuje na svůj oblíbený relaxační koníček – adventury, konkrétně žánr point-and-click her.<br><br>Plšek se věnuje historii adventur, která sahá až do 80. let, kdy se hrály textové adventury, a vzpomíná na svou první zkušenost s těmito hrami na počítači Didaktik M. Adventury popisuje jako interaktivní knížky, kde hráč rozhoduje o tom, jakým směrem se příběh ubírá. Vyzdvihuje také důležitost nelinearity, výzev a potřeby logického myšlení při hraní.<br><br>Přednášející se zmiňuje o textových adventurách, které byly zpočátku velmi jednoduché, ale měly své výzvy – často bylo obtížné zadat správný příkaz, aby hra pokračovala. S nástupem pokročilejších adventur a grafiky se situace zlepšila. Zmiňuje přínos Františka Fuky, který v Československu přinesl pokrok v adventurách s uživatelskými rozhraními, které umožňovaly lepší herní zážitek.<br><br>Plšek se vrací ke svým oblíbeným hrám, jako jsou ""Dizzy"" a ""Monkey Island,"" které označuje za průkopníky grafických adventur. S nástupem 3D her v 90. letech ale adventury začaly upadat, zejména kvůli rozmachu her jako Counter-Strike, které zcela změnily herní průmysl.<br><br>Přednášející upozorňuje, že návrat adventur přišel díky nezávislým vývojářům (Indie games) a dotykovým zařízením, které umožnily pohodlnější ovládání her. Také poukazuje na různé remastery starých her a nové adventury, které dnes hráči mohou hrát i na mobilních zařízeních. Jedním z doporučených titulů je například ""Return to Monkey Island"" od Rona Gilberta, který přednášející označuje za výborný příklad toho, jak se staré hry adaptují do moderní podoby.<br><br>V závěru Plšek zmiňuje další zajímavé tituly, jako jsou ""Simon the Sorcerer,"" ""Indiana Jones,"" ""Machinarium"" od Amanita Design a ""Broken Age."" Doporučuje adventury nejen pro jejich zábavné příběhy, ale i pro možnost relaxovat, aniž by bylo potřeba sedět dlouhé hodiny u počítače.","https://drive.google.com/file/d/1lpEmMXVCthu0ryCtH4RNhIxSfHZdD9dR/view?usp=sharing","https://www.youtube.com/watch?v=6rqUaPMYHk0"
"Pavel Jetenský","🎤 Vaadin Flow - Programátorské nebe frontendu pro Javisty","","Přednášející Pavel Jetenský představuje vývoj aplikace v technologii Vaadin, do které se zamiloval před dvěma lety. Vysvětluje, jak vytvořil aplikaci pro objednávání zboží pro bezobalový obchod. Aplikace má přibližně 4000 řádků kódu, z toho polovina je napsaná v Kotlinu a druhá v Javě. Pavel sdílí své nadšení z jednoduchosti vývoje uživatelského rozhraní ve Vaadinu ve srovnání s Reactem, kde se při vývoji setkával s většími obtížemi.<br><br>Ukazuje, jak aplikace vypadá a funguje. Aplikace umožňuje například výběr dodavatelů, import ceníků, optimalizaci dopravy a automatické generování objednávek. Pavel ukazuje, jak jednoduché je přidat komponenty jako DateTimePicker a zmiňuje, že aplikace podporuje Live Reload, což umožňuje okamžité nasazení změn bez nutnosti celého znovunačtení stránky.<br><br>V rámci své prezentace Pavel také vysvětluje, jak Vaadin umožňuje obousměrnou komunikaci mezi frontendem a backendem, přičemž backend zůstává plně v Javě. Zmiňuje silné typování Javy, které umožňuje jednodušší refaktoring oproti technologiím jako TypeScript. Vysvětluje výhody Vaadin Flow, kde je vše napsáno v Javě, a také Hilla, která kombinuje backend v Javě s frontendem v Reactu.<br><br>Dále se zaměřuje na základní koncepty ve Vaadinu, jako je práce s komponentami, layouty a Grid, který usnadňuje správu dat. Pavel zdůrazňuje, jak jednoduché je přidat a zobrazit data pomocí Gridu, který automaticky zobrazuje data z tříd pomocí reflexe.<br><br>Nakonec Pavel mluví o validaci ve formulářích pomocí Binderu, který zajišťuje obousměrné propisování dat mezi formulářem a Java objektem. Celou přednášku zakončuje poděkováním a zdůrazněním, že Vaadin umožňuje komunikaci mezi frontendem a backendem přes websockety nebo requesty.","https://docs.google.com/presentation/d/1Mn2zGT3l1hjI-unTH6ch7dGVGUJ8hg_K/edit?usp=sharing&ouid=116470056523174499937&rtpof=true&sd=true","https://www.youtube.com/watch?v=XNaYpZBEd1A"
"Ondřej Šika","🎤 Cloud Native Postgres","https://sika.io/","Přednášející v tomto videu se zaměřuje na provozování databází, konkrétně PostgreSQL, v Kubernetes. V úvodu vysvětluje, že provozování databází v Kubernetes bývalo dříve vnímáno jako složité a riskantní, ale postupně se stalo běžnou praxí. Hlavní výhodou provozování aplikací v Kubernetes je vysoká dostupnost, snadné zálohování a možnost automatizace.<br><br>Dále popisuje různé způsoby, jak PostgreSQL v Kubernetes provozovat. Zmíněny jsou například základní možnosti jako nasazení PostgreSQL v kontejneru s využitím Kubernetes StatefulSet, což ale neposkytuje plnou vysokou dostupnost. Přednášející pokračuje popisem pokročilejších metod, včetně použití Bitnami Helm Chartu, který usnadňuje nasazení replikace, ale stále postrádá některé klíčové funkce, jako jsou zálohy a Point-in-Time Recovery.<br><br>Největší část přednášky se soustředí na operátory, což jsou nástroje, které umožňují provozování PostgreSQL způsobem ""cloud-native"". Operátor umožňuje správu celého životního cyklu aplikace, včetně záloh, replikace a automatizace. Zmiňuje také Zalando operátor, který byl dříve populární, ale měl své nedostatky. Dnes je k dispozici CloudNativePG, který je podle přednášejícího nejlepší řešení pro provoz PostgreSQL v Kubernetes. Tento operátor podporuje různé typy replikace a nabízí kompletní zálohování a obnovu dat. Díky integraci s objektem Storage, jako je S3, umožňuje efektivní replikaci dat mezi regiony a disaster recovery scénáře.<br><br>Dále vysvětluje, že CloudNativePG operátor je navržen pro deklarativní přístup, což znamená, že veškeré změny v nastavení jsou prováděny pomocí YAML souborů a verzovacího systému, což umožňuje snadnou automatizaci nasazení. Operátor také podporuje integraci s monitoringem pomocí Prometheus a logování do formátu JSON.<br><br>Na závěr přednášející zmiňuje různé možnosti customizace PostgreSQL klastru v Kubernetes, a to jak z hlediska storage, tak i z hlediska nastavení jednotlivých replik. Celkově shrnuje, že provozování PostgreSQL v Kubernetes pomocí CloudNativePG operátoru je nyní dostatečně stabilní a efektivní řešení pro produkční nasazení a nabízí vysokou úroveň dostupnosti a škálovatelnosti.","https://docs.google.com/presentation/d/1zeEhah2i5J5RGENYm9ieA91JhK5lD3lwWQc0RU_Pa28/edit","https://www.youtube.com/watch?v=eveHWnD3n5U"
"Vladimír Oraný","🎤 DX > Cold Start","https://www.linkedin.com/in/vladimirorany/","V tomto videu se přednášející věnuje porovnání tří moderních Java frameworků – Helidon, Micronaut a Quarkus – z pohledu vývojářské zkušenosti (Developer Experience). Nejprve představí Helidon jako framework, který se drží standardů, jako je Jakarta EE a MicroProfile. Vývojáři se u něj nemusí zabývat reaktivním modelem, protože využívá virtual threads z projektu Loom, což zjednodušuje práci s vláknovými operacemi. Helidon je však považován za více akademický a neposkytuje tak široký ekosystém knihoven jako jiné frameworky.<br><br>Dále se zaměřuje na Micronaut, který nabízí větší množství možností pro různé knihovny a nástroje. Micronaut má propracované průvodce a generuje kompletní projekt, což je výhodné pro začátečníky. Poskytuje také rozsáhlé možnosti pro práci s databázemi a testování, včetně automatického připojení k testovacím kontejnerům. Přednášející upozorňuje, že Micronaut může generovat velké množství tříd, což zvyšuje komplexitu.<br><br>Quarkus je představen jako framework s velmi dobrým startem a efektivním generováním projektu, včetně rozsáhlé podpory kontejnerizace a různých databázových nástrojů. Nabízí vlastní knihovny, jako je Mutiny pro reaktivní programování nebo Qute pro práci s šablonami. Quarkus je podle přednášejícího vyladěnější v některých oblastech, ale používá své vlastní knihovny, což nemusí vyhovovat všem. Quarkus také automaticky spouští databázové kontejnery a umožňuje snadné připojení více služeb k jedné databázi.<br><br>Na závěr přednášející zmiňuje, že všechny tři frameworky poskytují skvělý výkon, ale každý má své specifické výhody. Helidon je akademičtější, Micronaut nabízí širší ekosystém a Quarkus má propracovanější nástroje pro správu projektů a integraci služeb.","https://docs.google.com/presentation/d/1ZkpR4FWX_VRYsC-U6jDXRV5lwcpXd9ietQp64ZZ6El8/edit?usp=sharing","https://www.youtube.com/watch?v=dDrid7In_98"
"Marian Schubert","🎤 Event Modeling","https://www.linkedin.com/in/marianschubert/","Přednášející Marián Šubert ve videu představuje koncept **Event Modelingu**, který ho posledních několik let zaujal a snaží se jej zavést ve své firmě. Tento model slouží k lepšímu pochopení a plánování projektů, zejména při jejich počáteční fázi. Přednášející zmiňuje, že při startu projektu je potřeba shromáždit požadavky, akceptační kritéria, a zjistit, jak budou uživatelé s aplikací interagovat. Event Modeling usnadňuje tyto procesy a přináší konkrétní přínosy.<br><br>Hlavním cílem Event Modelingu je vytvořit sdílené porozumění problému a pomoci s **domain-driven designem** (DDD) bez nutnosti studovat složitou literaturu či terminologii. Přednášející vysvětluje, že díky Event Modelingu lze snadno vytvořit model systému, který bude odpovídat produkčnímu kódu, čímž se zlepší spolupráce mezi týmy.<br><br>Event Modeling pracuje s několika klíčovými komponentami:<br><br>1. **UI prvky (bílé krabičky)** – reprezentují uživatelské rozhraní systému nebo automatizované procesy.<br>2. **Eventy (oranžové krabičky)** – zaznamenávají, co se v systému stalo, jako například uživatel se zaregistroval nebo rezervoval pokoj.<br>3. **Read modely nebo views (zelené krabičky)** – poskytují data pro UI nebo jiné systémy a jsou optimalizovány pro výkon.<br>4. **Komandy (modré krabičky)** – definují, jak systém reaguje na uživatelské vstupy nebo jiné akce.<br>5. **Automatizace (kolečka)** – symbolizují procesy, které automatizují určité úlohy v systému.<br><br>V průběhu modelování se vytváří vizuální model, který popisuje příběh aplikace a umožňuje pochopit její strukturu zleva doprava, po časové ose. Tento model lze sdílet mezi týmy a díky němu jsou všechny role, od programátorů po byznysové zástupce, schopné přispět k celkovému návrhu.<br><br>Dalším důležitým aspektem Event Modelingu je, že napomáhá lepší organizaci práce, jelikož každý člověk v týmu může paralelně pracovat na různých částech projektu. Přednášející zdůrazňuje, že výstupem jsou čisté funkcionality, které mohou být snadno testovány, a tím pádem se sníží potřeba komplexních testů.<br><br>V závěru zmiňuje, že Event Modeling umožňuje lépe odhadnout náklady na projekt, což může být přínosné při sjednávání projektů na fixní cenu.","https://docs.google.com/presentation/d/1deiMO70bQLJJUWgO5zDRdlBC9BP6FXH9QMQgAnfCSaA/edit?usp=sharing","https://www.youtube.com/watch?v=FfYoV2OTGro"
"Pavel Lahoda","🎤 Distributed Serverless","","Přednášející na začátku vysvětluje, že se často zabývá vývojem klient-server řešení a představuje část klientské implementace napsanou ve Swiftu. Poté se zamýšlí nad tím, jakou technologii použít pro serverovou část, přičemž preferuje řešení, o které se bude muset co nejméně starat. Zaujala ho myšlenka serverless, kterou ilustruje zmínkou o běžných poskytovatelích, jako jsou AWS Lambda, Google Cloud a Azure, ale narazil na problémy s jejich vhodností pro jeho požadavky.<br><br>Jedním z jeho klíčových požadavků je škálovatelnost a odolnost řešení, zejména pokud jde o nezávislost na poskytovateli, který by mohl kdykoliv aplikaci odstranit. Také zdůrazňuje důležitost snížení provozních nákladů a hledání způsobů, jak aplikaci provozovat s minimálními náklady. Dále se věnuje myšlence, že by bylo ideální, kdyby serverové řešení bylo možné ověřit z hlediska toho, co běží na serveru, a tak zajistit, že nedojde k neoprávněným zásahům.<br><br>Přednášející poté popisuje různé technologie, které zkoumal, včetně open-source řešení založených na Kubernetes a blockchainu. Zmiňuje například technologie Akash a Ethereum, ale naráží na jejich omezení, jako je například komplikovaná komunikace přes smart kontrakty.<br><br>Nakonec představuje technologii od švýcarské firmy, která pracuje s WebAssembly a blockchainem. Toto řešení nabízí možnost nasazování kanistrů, které fungují jako malé distribuované výpočetní jednotky, a podporuje zpracování HTTP dotazů. Zdůrazňuje, že tato technologie je pro něj zatím nejzajímavější, protože umožňuje škálování a nově implementuje i streaming. Na závěr přednášky se věnuje otázkám a odpovědím s publikem a představuje koncept „revers Q&A“, kdy se ptá posluchačů a oni mu odpovídají.","https://github.com/actiwerks/JOpenSpace2024","https://www.youtube.com/watch?v=uKPHRD47Wzk"
"Tomáš Janečka","🎤 Prototypovanie deskových hier + využitie AI nástrojov","https://www.linkedin.com/in/tom","Přednášející Tomáš v úvodu videa vysvětluje, že se chystá prezentovat kreativní téma, které se týká tvorby deskových her, prototypování a využití AI nástrojů. Na začátku představí, jaké technologie používá a popíše proces, jak vytvářel herní karty, krabičky na karty i krabici na celou hru. Věnuje se jedné konkrétní hře, na které pracuje přes čtyři roky.<br><br>Dále se ptá publika, zda někdo hraje League of Legends, Dotu nebo karetní hru Bang!, a zdůrazňuje, že jeho zájem o herní design začal při studiu na univerzitě. Tam se přihlásil na předmět game design, který ho vedl k vývoji složitější hry, než bylo požadováno. Přednášející vysvětluje, že při tvorbě hry musel řešit mnoho technických výzev, například ukládání dat o hrdinech, jejich akcích a příbězích, a popisuje nutnost jejich verzování a navrhování.<br><br>Technologie, které používá, zahrnují kombinaci Excelu a nástroje Nandeck pro vytváření karet. Vysvětluje, jak si uložil jednotlivé akce hrdinů v Excelu a pomocí Nandecku generoval 200 karet připravených k tisku. Grafiku vytvářel pomocí programu getimg.tpx a texty psal pomocí GPT-4, což mu umožnilo psát příběhy pro hrdiny a popisy akcí.<br><br>V další části videa ukazuje, jak vytvářel krabice na hru. Nejtěžší bylo podle něj zvolit téma, ale nakonec využil AI pro generování obrázků a kombinoval různé styly grafiky, aby vytvořil realistické i kreslené verze jednotlivých herních prvků. Na závěr ukazuje, jak vytvořil arénu pro hru z jednotlivých obrázků a sestavil ji do kompletní podoby.<br><br>Tomáš také zmíní, jak využil ChatGPT k vytvoření příběhů pro jednotlivé hrdiny. Do nástroje vložil tabulku s údaji o hrdinovi, nechal AI napsat příběh a poté jej upravil na požadovaný počet znaků. <br><br>Na závěr přednášky Tomáš shrnuje vývoj hry, kterou v šesti verzích postupně zlepšoval. Od prvních prototypů kreslených perem na papír až po finální verzi, která je plně hratelná a připravená k distribuci. Zmiňuje také svůj LinkedIn profil, kde poskytuje aktuální informace o vydání hry a dalších aktualizacích.","https://docs.google.com/presentation/d/1aFYv0B77kvQDiL0eKRBmywroo7iVzmJ6OZnXmlwPQN4/edit?usp=sharing","https://www.youtube.com/watch?v=jmRRinhmTg0"
"Pavel Kříž","🎤 KNX, ta jediná správná domácí automatizace","https://www.linkedin.com/in/pavel-kriz-cz/","Přednášející Pavel Kříž představuje technologie pro domácí automatizaci, se zaměřením na KNX, kterou považuje za nejlepší a nejvhodnější sběrnici. Na začátku rozděluje automatizační technologie na drátové a bezdrátové, přičemž vyzdvihuje výhody drátových řešení jako KNX, a také zmiňuje další možnosti jako Loxone a průmyslové PLC systémy. Vysvětluje, že bezdrátové technologie se hodí spíše pro situace, kdy nelze snadno instalovat kabely, například při dodatečných úpravách elektroinstalace.<br><br>Dále Pavel popisuje technologie, které má doma nainstalované, včetně KNX, Zigbee a Wi-Fi, a zmiňuje, že kombinace různých technologií může vést k tzv. „zoologické zahradě“, kde je potřeba integrovat více systémů. Doporučuje použití platformy Home Assistant pro integraci těchto technologií.<br><br>Věnuje se i historii KNX sběrnice, která se dříve nazývala Instabus a EIB. Uvádí, že KNX podporuje různá média pro přenos dat, například Twisted pair (drát), Powerline, bezdrátové a ethernetové připojení. Přednášející popisuje základní technické parametry sběrnice KNX, například napětí a způsob komunikace mezi zařízeními.<br><br>Pavel zdůrazňuje výhody KNX, včetně otevřeného standardu, široké podpory výrobců a nezávislosti jednotlivých komponent, které fungují autonomně. Systém také nevyžaduje centrální server, což zajišťuje jeho spolehlivost. Upozorňuje však na nevýhody, jako je vysoká cena komponent a potřeba tahání nových kabelů, což je vhodné především pro novostavby a rozsáhlé rekonstrukce.<br><br>Zmiňuje možnosti snižování nákladů nákupem komponent na eBay nebo použitím čínských zařízení, přičemž si dává pozor na jejich bezpečnost. Přednášející také zmiňuje, že konfigurační software pro KNX není zdarma, ale lze ho získat levněji prostřednictvím školení nebo nákupu menších licencí.<br><br>Na závěr Pavel předvádí základní demo KNX systému, kde propojuje zdroj sběrnice s aktuátory a ukazuje, jak zařízení reagují na změny v nastavení. Vysvětluje, že si uživatelé mohou vytvořit vlastní zařízení pro KNX, například flashováním čínských komponentů nebo pomocí vlastního softwaru.","https://docs.google.com/presentation/d/1bVry4V0QrwJmw4ZiGIGTrkI-hFaPeke71Woc_61eK8A/edit?usp=sharing","https://www.youtube.com/watch?v=pDbPzIvMAJo"
"Pavel Šimerda ","🎤 Systémové programovací jazyky","","Přednášející začíná tím, že se zaměřuje na téma kompilovaných programovacích jazyků, s důrazem na jazyk Rust, kterému se věnuje. Postupně rozebírá různé aspekty nízkoúrovňových (low-level) jazyků, jako je C a Rust, a jejich význam při práci s pamětí a hardwarovou kontrolou.<br><br>Vysvětluje, že nízkoúrovňové jazyky poskytují programátorovi větší kontrolu nad tím, jak se pracuje s pamětí, ale není vždy nutné tuto kontrolu plně využívat. Přednášející se zmiňuje o výhodách abstrakce, kdy lze psát jednoduché aplikace, aniž by bylo nutné neustále spravovat paměť.<br><br>Další klíčové téma přednášky je imperativní programování, které je pro nízkoúrovňové jazyky typické. Hovoří o tom, že při programování pro CPU nebo systémy s více procesory je potřeba více příkazů a méně funkcí typických pro funkcionální programování. Zmiňuje také význam garbage collection a plánování vláken, jak je tomu například u jazyka Go, a jejich vliv na výkon programu.<br><br>Přednášející diskutuje i o možnosti v některých jazycích, například v Rustu, obejít se bez nutnosti využívat runtime systém a garbage collection. Poukazuje na to, že pro plnou kontrolu nad výkonem programu je výhodné psát kód, který je přímo optimalizován pro hardware, nikoliv pro operační systém. Vysvětluje, jak je možné se v nízkoúrovňových jazycích vyhnout závislosti na standardních knihovnách operačního systému, a přiblížit se tak přímé hardwarové úrovni.<br><br>Přednášející dále porovnává různé programovací jazyky a jejich využití v nízkoúrovňovém programování. Diskutuje jazyky jako C, Rust, Swift nebo Zig a jejich vhodnost pro různé typy projektů. Zmiňuje také, jaké výhody a nevýhody přináší používání těchto jazyků, zejména pokud jde o jednoduchost syntaxe a komplexitu, přičemž C++ vyzdvihuje za jeho flexibilitu, která však přichází na úkor složitosti.<br><br>Závěrem se věnuje důvodům, proč volí Rust pro své projekty, a vyzdvihuje jeho schopnost zaručit bezpečnost programů, zejména ve smyslu správy paměti a bezpečného paralelního programování. Rust podle něj nabízí výhody, které u jiných nízkoúrovňových jazyků často chybí, a přibližuje produktivitu k jazykům vyšší úrovně, jako je Python.<br><br>Na závěr zmiňuje i současné trendy v používání Rustu, například v Linuxu, a zmíní, že Rust je čím dál více používán v průmyslu, a to i na úrovni mikrokontrolerů.","https://drive.google.com/file/d/1DA2WoEE2m0ftNlCWzA_fXu60t9_CvOAD/view?usp=sharing","https://www.youtube.com/watch?v=FuBdlGwLKgQ"
"Petr Ferschmann","🎤 Je čas opustit AWS?","","Přednášející ve videu mluví o využití cloudu, konkrétně AWS, a otázce, zda je čas ho opustit. Vysvětluje, že jejich firma používá AWS pro své databáze, které obsahují 6 TB dat, zpracovávají 3 miliony API requestů denně a přenášejí 500 GB až 1 TB dat. Nicméně cena za využívání AWS výrazně vzrostla, což představuje až 10 % obratu firmy. Proto se rozhodli hledat alternativní řešení, protože náklady narostly na 250 000 Kč měsíčně, což je podstatný skok oproti původním 100 000 Kč.<br><br>Přednášející porovnává AWS s jinými poskytovateli, konkrétně s Hetznerem, kde za podobné služby platí výrazně méně – kolem 165 eur za server s 256 GB RAM, což vychází na dvacetinové náklady oproti AWS. Zmiňuje, že AWS je výhodný díky možnostem škálování a vysoké dostupnosti, ale je také drahý.<br><br>Firma se proto rozhodla přesunout část své infrastruktury na fyzické servery a využít Kubernetes jako nástroj pro správu kontejnerů. Kubernetes umožňuje spouštět aplikace flexibilně na více serverech, automaticky přepínat servery v případě výpadku a škálovat podle potřeby. Přednášející popisuje Kubernetes jako de facto standard, který je „developer-friendly“ a velmi rychlý, pokud jde o nasazování a správu aplikací. <br><br>Dále vysvětluje, jak Kubernetes řeší problémy s konfigurací, bezpečností a ukládáním dat, a zmiňuje používání Longhorn pro vysokou dostupnost datového úložiště. Nakonec doporučuje Kubernetes pro firmy, které chtějí optimalizovat své náklady na infrastrukturu, a vysvětluje, že pro jejich firmu přechod na Kubernetes znamenal návratnost investice během tří týdnů, s úsporou 2 milionů Kč ročně.<br><br>Závěrem přednášející doporučuje Kubernetes jako technologii, kterou by se měl každý naučit, pokud chce efektivně spravovat svou infrastrukturu, ať už na vlastních serverech nebo v cloudu.","https://docs.google.com/presentation/d/1ryH7oGEWlsbvkz2G9cNXRmw-7qwDQmy_unh9cskr_ns/edit?usp=sharing","https://www.youtube.com/watch?v=DQ7SoXb9TNI"
"Zdenek Henek","🎤 Datové struktury optimalizované pro cloud","","","https://docs.google.com/presentation/d/1oP2ESRrVwW1D_d82H4ACDzlAooDebIRjmQ-Z9JIJNbM/edit?usp=sharing",""
"Tomáš Zezula","🎤 Dynamické objekty v Kotlinu","https://www.linkedin.com/in/zezulatomas/","Přednášející Tomáš Zezula, backendový vývojář, se v této přednášce věnuje tématu dynamických objektů v jazyce Kotlin. Na začátku vysvětluje, že ačkoli dynamické objekty nejsou běžně potřebné, v určitém projektu se mu hodily, a proto se rozhodl toto řešení představit. Uvádí, že dynamické objekty umožňují za běhu programu přidávat nové vlastnosti nebo metody, podobně jako je to možné například v JavaScriptu. Zdůrazňuje však, že tento přístup není doporučený, protože postrádá typovou bezpečnost a může vést k neudržitelnému kódu. <br><br>Tomáš popisuje, jakým způsobem se mu podařilo zachovat typovou bezpečnost při práci s dynamickými objekty v Kotlinu. Uvádí konkrétní případ použití, kdy v rámci projektu potřeboval vývojářům umožnit vytváření dynamických objektů, aniž by o tom musel předem vědět. Předvádí krátké demo, ve kterém ukazuje, jak přistupuje k dynamickým vlastnostem objektu a jakým způsobem řeší typovou bezpečnost.<br><br>Dále se zabývá validací dynamických objektů a ukazuje dva režimy práce s nimi: přísný a méně přísný režim. V přísném režimu program vygeneruje chybu, pokud není dynamická vlastnost definována správně, zatímco v méně přísném režimu vývojář musí ošetřit případné výjimky sám. <br><br>V závěru přednášky vysvětluje svou motivaci k řešení tohoto problému. Pracoval na projektu souvisejícím s API služby Zoom, jehož specifikace je velmi komplikovaná a rozsáhlá. Proto se rozhodl nepoužívat automaticky generovaný model a místo toho umožnil vývojářům definovat dynamické objekty podle jejich potřeb. Tomáš také zmínil, že se setká s účastníky na plánovaném meetupu v Brně.","https://docs.google.com/presentation/d/16rFLeR9TVHyDpnufA56qAyXneskjv_AJDAnf6mz-Sx0/edit?usp=sharing","https://www.youtube.com/watch?v=wNY1uEHFoaI"
"František Řezáč","🎤 Abstrakce a reprezentace","https://witter.cz/@calavera","Ve videu Franta Řezáč mluví o pojmech abstrakce a reprezentace a jejich významu v každodenním myšlení a programování. Na základě nepříjemných zkušeností v práci začal zpochybňovat samotnou existenci abstrakce. Abstrakce je pro něj způsob, jakým mozek zpracovává informace, které nelze přímo uchopit, například počet jablek místo konkrétního fyzického předmětu. Přednášející vysvětluje, že čísla a cifry, které používáme, jsou pouze reprezentacemi těchto abstraktních pojmů a mohou být zobrazeny různými způsoby, jako binární kód nebo římské číslice.<br><br>Dále Řezáč rozebírá, jak jako inženýra ho zajímá, zda jsou všechny tyto reprezentace ekvivalentní a zaměnitelné. Tento problém se podle něj často vyskytuje, například když se matematické koncepty, jako že 4,9 periodických je vlastně stejné jako 5, dostávají do konfliktu s běžným vnímáním čísel. V této souvislosti zmiňuje esej Barryho Mazura, který se zabývá otázkou, kdy lze považovat dvě věci za stejné, což je také základem teorie kategorií.<br><br>Následně se Franta zaměřuje na programování, které označuje za aplikovanou matematiku. Problémy s reprezentací času ilustruje na příkladu historické třídy Java `util.Date`, která uchovává čas jako počet milisekund od roku 1970. Tento přístup je podle něj nevhodný, a proto byla zavedena nová třída `Java Time Instant`, která poskytuje lepší abstrakci času. Řezáč varuje, že je důležité neupínat se příliš na konkrétní implementaci, ale chápat abstraktní myšlenku, kterou třída představuje.<br><br>V závěru přednášky Řezáč přiznává, že ačkoli abstrakce a reprezentace jsou užitečné koncepty, realita bývá složitější. Na příkladu meziplanetárních cest ukazuje, že čas není vždy tak snadno měřitelný a srovnatelný, jak se může zdát, a že problémy s časovými zónami jsou běžné například při obchodování po celém světě. Jako praktické řešení zmiňuje využití tabulky, kde jednotlivé řádky představují různé reprezentace téhož problému. Nakonec shrnuje, že pro něj abstrakce znamená tyto ručně vytvářené řádky v tabulce, které mu umožňují řešit komplexní problémy.","https://docs.google.com/presentation/d/1m5UEhpDeCTzoOtDHYfAb8qh0KnKUPUxQpwzIm9vG4u4/edit?usp=sharing","https://www.youtube.com/watch?v=PutsvV42SVc"
"Vilibald Wanča","🎤 RTO nebo GTFO","https://witter.cz/@wvi","Přednášející, Vilda, začíná video tím, že téma je pro něj terapeutické, protože bude mluvit o práci na dálku a práci v kancelářích. Zvlášť v současné době, kdy mnoho velkých firem, jako například Amazon, vyžaduje návrat zaměstnanců do kanceláří pod hrozbou ztráty zaměstnání.<br><br>Přednášející se snaží oslovit své publikum krátkou anketou, aby zjistil, kolik lidí pracuje na dálku. Zmiňuje, že i on sám pracuje částečně remote, ale oficiálně je povinen chodit do kanceláře čtyřikrát týdně. Následně se vrací k období pandemie, kdy mnoho firem rychle přešlo na práci z domova. Dává příklad svého působení ve firmě, která přešla kompletně na práci na dálku a fungovala bez problémů.<br><br>Vilda se zamýšlí nad tím, jak rychle se ukázalo, že mnoho věcí lze zvládnout remote, a kritizuje nefunkčnost některých nástrojů, jako například Microsoft Teams. Na druhou stranu oceňuje výhody nástrojů, jako je Zoom, který on sám používal.<br><br>Přednášející také zmiňuje, že práce na dálku může mít i své negativní stránky, například sociální izolaci, kdy někteří lidé zůstávají doma celé týdny a vycházejí jen minimálně. Dává příklady kolegů, kteří si nechávali dovážet jídlo a prakticky nevycházeli z domu.<br><br>Poté se dotýká důležitého tématu kancelářské kultury a vysvětluje, že manažeři mohou mít pocit ztráty kontroly, když nevidí své zaměstnance v kanceláři. Podle přednášejícího je to emocionální reakce a snaha managementu udržet si roli, i když již není tak potřebná.<br><br>Dále se věnuje tomu, že práce na dálku je v softwarovém odvětví přirozená a pro mnoho lidí efektivnější, protože mohou pracovat nerušeně. Uvádí, že pro některé firmy je návrat do kanceláří zbytečným krokem zpět a že budoucnost je v remote-friendly přístupu, kde zaměstnanci mají možnost pracovat jak z domova, tak z kanceláře podle svých potřeb.<br><br>Zmiňuje, že práce na dálku vyžaduje silnou psanou kulturu, kdy jsou všechny procesy a rozhodnutí dokumentovány, což je zásadní pro efektivní spolupráci v distribuovaných týmech. Přednášející doporučuje využívání chatu, wikipedií a dalších nástrojů k synchronizaci informací. Také zmiňuje, že dobrý setup pro vzdálenou práci zahrnuje například využití streamovacích technologií, jako je OBS, k lepší komunikaci a prezentaci.<br><br>Nakonec se věnuje problematice školení nováčků a juniorních zaměstnanců v remote prostředí, kdy je klíčové ukazovat jim práci v reálném čase, sdílet obrazovku a věnovat se pair programmingu, aby mohli snadněji pochopit různé pracovní postupy.<br><br>Vilda uzavírá video s myšlenkou, že firmy, které pochopí a adoptují remote-friendly přístup, budou mít v budoucnu konkurenční výhodu, zatímco ty, které se toho bojí, se tomu budou muset přizpůsobit.","https://docs.google.com/presentation/d/1nsSU1fT0ysECDCbxlT0dw-exEWUyYgPB/edit?usp=sharing&ouid=104091090538791778827&rtpof=true&sd=true","https://www.youtube.com/watch?v=uT8nNgSCiyY"
"chemiX","🎤Deskove hry, jak na ne","honzacerny.com","Přednášející Honza Černý, známý také jako Chemix, začíná vyprávění o své lásce k hrám, kterou získal od svého otce. Ten ho naučil, že není nutné vše kupovat, ale že si lze věci také tvořit. Honza zmiňuje, že nejdůležitější sdělení jeho přednášky je, že by lidé měli hrát hry, protože jsou pro něj zdrojem zábavy a poučení.<br><br>Má profil na portálu Zatrolené hry, kde má sbírku 252 her. To někdy vyvolává diskuse s manželkou, protože neustále přibývají nové hry – ročně vyjde až 6000 nových deskových her po celém světě. Z toho důvodu upozorňuje na vysokou konkurenci, pokud by někdo chtěl vyvinout vlastní hru.<br><br>Honza vysvětluje, že ho zajímají hry do šířky, podobně jako ho zajímají různé technologie jako Oracle databáze nebo nové frameworky. Zkoumá hry napříč různými kategoriemi, zajímá ho, jaké mechaniky a herní prvky obsahují.<br><br>Zmiňuje různé typy her, jako jsou například Roll and Write nebo Flip and Write hry, kde se hráči zaměřují na kreslení nebo zakreslování prvků na mapu. Zmínil také různé kooperativní hry, včetně Skyteamu, kde hráči hrají jako pilot a kopilot. Doporučuje však tuto hru nehrát s manželkou, protože případné neúspěchy mohou vést k neshodám.<br><br>Dále mluví o komplexnějších hrách, jako je Brass Birmingham, což je náročná ekonomická hra bez náhody, která ho velmi baví. Zmiňuje také asymetrickou hru Root, kde každý hráč ovládá jiný klan a snaží se ovládnout les.<br><br>Honza přechází k tématu vývoje her a vysvětluje svůj přístup k tvorbě her. Začíná nápadem a následně vytváří papírový prototyp, který testuje, aby odhalil chyby a možnosti zlepšení. Klade důraz na iterativní proces, kde je běžné hru několikrát předělat. Doporučuje nástroje jako Nandec a Decktoser pro vytvoření high fidelity prototypů a Tabletop Simulator pro virtuální testování her.<br><br>Závěrem motivuje posluchače k tomu, aby hráli více her, zkoušeli různé herní mechaniky, kombinovali témata a zkoumali nové nápady, i když je následně odloží do šuplíku. Hlavním poselstvím je hrát hry a užívat si kreativní proces jejich tvorby.","https://www.figma.com/deck/tTzlnhuKFmT0lkKrYKQn1G","https://www.youtube.com/watch?v=D6XCm--kenE"
"David Petrla","🎤Poletíme ke hvězdám? Pokrok v raketových motorech.","","Přednášející se v této přednášce věnuje principům raketových motorů a jejich různým typům. Nejprve vysvětluje základní fungování raketového motoru, kde je klíčovým prvkem pohonná hmota, která není palivem, ale látkou, jejíž energie je nějakým způsobem uvolňována. Hlavním úkolem trysky je usměrnit nekoordinovaný pohyb částic tak, aby se pohybovaly jedním směrem. <br><br>Jednoduchý příklad je motor na stlačený plyn, kde tlaková nádoba obsahuje silně stlačený plyn, který uniká dozadu. Tento princip je využíván například na Mezinárodní vesmírné stanici (ISS). Dále přednášející přechází k motorům, kde je přidána chemická energie, a vysvětluje, jak chemická reakce pohání raketový motor pomocí katalyzátoru, který způsobuje uvolnění energie z pohonné hmoty.<br><br>Další typ motoru, který zmiňuje, je hypergolický motor, kde dvě pohonné hmoty samovolně reagují při smísení, což zjednodušuje konstrukci, ale tyto látky bývají velmi toxické. Přednášející zdůrazňuje, že tento typ motorů je často používán pro manévrovací trysky kosmických lodí.<br><br>Dále se dostává k problematice čerpadel v raketových motorech, která jsou nezbytná, aby zajišťovala dostatečný tlak na vstupu do spalovací komory. Vysvětluje konstrukci čerpadel, například u motorů raketoplánu, kde každé čerpadlo dosahovalo výkonu až 20 MW. V historickém kontextu připomíná motor německé střely V-2, který byl předchůdcem moderních raketových motorů.<br><br>Přednášející pokračuje vysvětlením rozdílu mezi otevřeným a uzavřeným cyklem raketových motorů, přičemž uzavřený cyklus je efektivnější, ale složitější na konstrukci. Zmiňuje také nejmodernější raketové motory, jako je Raptor společnosti SpaceX, který využívá právě uzavřený cyklus.<br><br>V závěru přednášky se věnuje novým technologiím, včetně detonačních motorů, které by mohly zvýšit efektivitu raketových motorů o 25 %. Zmiňuje také projekt jaderných raketových motorů, které byly vyvinuty v 60. letech v rámci projektu NERVA, a které by mohly v budoucnu zkrátit dobu letu na Mars na polovinu. Tento typ motorů by mohl být znovu nasazen v kosmických misích v rámci projektu DRACO kolem roku 2027.","https://docs.google.com/presentation/d/1FUKB6PU6YjGb4baaBKLjWfTGAdGCWRLW/edit?usp=sharing&ouid=106532318343114098414&rtpof=true&sd=true","https://www.youtube.com/watch?v=X7vfsiMQBYw"
"Pavel Tomášek","🎤Výuka informatiky na neinformatické fakultě","","Přednášející začíná tím, že se zaměřuje na téma kompilovaných programovacích jazyků, s důrazem na jazyk Rust, kterému se věnuje. Postupně rozebírá různé aspekty nízkoúrovňových (low-level) jazyků, jako je C a Rust, a jejich význam při práci s pamětí a hardwarovou kontrolou.<br><br>Vysvětluje, že nízkoúrovňové jazyky poskytují programátorovi větší kontrolu nad tím, jak se pracuje s pamětí, ale není vždy nutné tuto kontrolu plně využívat. Přednášející se zmiňuje o výhodách abstrakce, kdy lze psát jednoduché aplikace, aniž by bylo nutné neustále spravovat paměť.<br><br>Další klíčové téma přednášky je imperativní programování, které je pro nízkoúrovňové jazyky typické. Hovoří o tom, že při programování pro CPU nebo systémy s více procesory je potřeba více příkazů a méně funkcí typických pro funkcionální programování. Zmiňuje také význam garbage collection a plánování vláken, jak je tomu například u jazyka Go, a jejich vliv na výkon programu.<br><br>Přednášející diskutuje i o možnosti v některých jazycích, například v Rustu, obejít se bez nutnosti využívat runtime systém a garbage collection. Poukazuje na to, že pro plnou kontrolu nad výkonem programu je výhodné psát kód, který je přímo optimalizován pro hardware, nikoliv pro operační systém. Vysvětluje, jak je možné se v nízkoúrovňových jazycích vyhnout závislosti na standardních knihovnách operačního systému, a přiblížit se tak přímé hardwarové úrovni.<br><br>Přednášející dále porovnává různé programovací jazyky a jejich využití v nízkoúrovňovém programování. Diskutuje jazyky jako C, Rust, Swift nebo Zig a jejich vhodnost pro různé typy projektů. Zmiňuje také, jaké výhody a nevýhody přináší používání těchto jazyků, zejména pokud jde o jednoduchost syntaxe a komplexitu, přičemž C++ vyzdvihuje za jeho flexibilitu, která však přichází na úkor složitosti.<br><br>Závěrem se věnuje důvodům, proč volí Rust pro své projekty, a vyzdvihuje jeho schopnost zaručit bezpečnost programů, zejména ve smyslu správy paměti a bezpečného paralelního programování. Rust podle něj nabízí výhody, které u jiných nízkoúrovňových jazyků často chybí, a přibližuje produktivitu k jazykům vyšší úrovně, jako je Python.<br><br>Na závěr zmiňuje i současné trendy v používání Rustu, například v Linuxu, a zmíní, že Rust je čím dál více používán v průmyslu, a to i na úrovni mikrokontrolerů.","","https://www.youtube.com/watch?v=FuBdlGwLKgQ"
