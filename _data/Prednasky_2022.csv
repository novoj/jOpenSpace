Prednasejici,Nazev,Bio,Anotace,Url,YouTubeJan Horalík,Shorův algoritmus - kvantová magie v praxi,https://twitter.com/jan_horalik,"<ul> <li>soucasne RSA sifry spolehaji na rozklad velkeho cisla na rozklad nasobku prvocisel </li> <li>vypocetne narocna operace a na tom stoji soucasna kryptografie </li> <li>kvantove pocitace mohou tuto rovnovahu narusit</li> <li>superpozice - qbit je vlastne pozice na povrchu koule</li> <li>stav lze precist pouze jednou</li> <li>Interference - eliminace ne&#382;&aacute;douc&iacute;ch stav&#367; (kter&eacute; nevedou ke cht&#283;n&eacute;mu v&yacute;sledku) </li> <li>prectenim druhe casti cisla, ktere reprezentuje modulo (zbytek po deleni) jsme schopni odstranit prave ty nezadouci stavy pro konkretni hodnoty modula o kterych vime, ze nejsou spravne </li> <li>fourierovou transformaci jsme schopni dopocitat cislo, ktere nam umozni s &#8540; pravdepodobnosti rozlozit vstupni velke cislo a iterativne pokracovat s rozkladem dal </li> <li>pro prolomen&iacute; z&aacute;kladn&iacute; RSA &scaron;ifry je pot&#345;eba 1024 qbit&#367;, aktu&aacute;ln&iacute; kvantov&eacute; po&#269;&iacute;ta&#269;e maji ni&#382;&scaron;&iacute; stovky qbit&#367; </li></ul>",https://docs.google.com/presentation/d/1qG1tuSuJvNjVHJ57_nUSPp4PBhHVMD-2HUvSlHorgJg/edit?usp=sharing,https://youtu.be/nl1IQ2LPGrgJan Vondrouš,CDC,,"<ul> <li><a   href=""https://www.google.com/url?q=https://pact.io/&amp;sa=D&amp;source=editors&amp;ust=1668286179702753&amp;usg=AOvVaw1qjlYDbS00D0gc2JaZR4IZ"">https://pact.io/</a>&nbsp;nejznamnejsi framework pro CDC</li> <li>Sc&eacute;n&aacute;&#345; - consumer, provider, komunikace</li> <li>E2E testov&aacute;n&iacute;, je drah&eacute;, pomal&eacute; ne&scaron;k&aacute;luje </li> <li>odd&#283;len&eacute; testov&aacute;n&iacute; s pou&#382;it&iacute;m mocku - rychlej&scaron;&iacute;, stabiln&#283;j&scaron;&iacute;,  l&eacute;pe se udr&#382;uje a &scaron;k&aacute;luje, ale netestuje re&aacute;ln&yacute; case cel&eacute;ho syst&eacute;mu </li> <li>CDC - p&#345;i testov&aacute;n&iacute; consumera vznikne kontraktu, kter&yacute; pot&eacute; ov&#283;&#345;uje  test provideru </li> <li>Pact Broker - aplikace, kterou je mozne spustit v dockeru a ktera si stahne kontrakt a umi jej nasimulovat </li> <li>p&#345;&iacute;klad - <a   href=""https://www.google.com/url?q=https://github.com/bugs84/pact-01-hello-world-pact-broker&amp;sa=D&amp;source=editors&amp;ust=1668286179703507&amp;usg=AOvVaw3_boInjrEvyOwrXqISfd-e"">https://github.com/bugs84/pact-01-hello-world-pact-broker</a> </li></ul>",https://bit.ly/3CElmg8,https://youtu.be/ojGtDrTuOlwLubomír Petera,Šachy,https://www.linkedin.com/in/lubomirus/,"<ul> <li>v 17 letech Fide ELO rating 2000+, velke zkusenosti se sachy</li> <li>Arpad Elo v roce 1959 prisel s prvnim ratingem pro hodnoceni vykonnosti ve hre sachy </li> <li>mladsim hracum se rating meni dynamicteji nez starsim hracum</li> <li>do ratingu se pricita/odecita podil rozdilu ELO ratingu obou hracu - tj. s cim narocnejsim souperem clovek  vyhraje, tim vice bodu si pripise a vice versa </li> <li>soucasni mistri maji az 2800 bodu</li> <li>sachovy engine sunfish v Pythonu o 111 radcich kodu ma rating nad 2000 bodu </li> <li>existuje Universal Chess Interface, ktery popisuje komunikaci mezi sachovym enginem a klientem, pouziva k tom  STDIN / STDOUT pro komunikaci </li> <li>1769 prvni &ldquo;pocitac&rdquo; - mechanicky Turek (coz byl podvod)</li> <li>prvni skutecny byl v roce 1912 prvni mechanicky stroj, ktery umel zahrat konkretni koncovku </li> <li>1951 Alan Turing napsal na papire algoritmus, ktery by umel hrat sachy</li> <li>1966 prvni pocitacova partie po telegrafu - hrali po dobu 9 mesicu</li> <li>1981 poprve porazi pocitac cloveka</li> <li>1997 vyhrava Deep Blue nad Garry Kasparovem - mistrem sveta</li> <li>2005 Rybka engine se stava nejlepsim enginem na sachy</li> <li>2009 Pocket Fritz - engine na mobilni telefon, ktery ma rating 2900 - tj. vetsi nez mistr svete </li> <li>2020 stockfish - soucasny nejlepsi engine, cca 20k radku kodu </li> <li>Pro&#269; nen&iacute; mo&#382;n&eacute; &ldquo;propo&#269;&iacute;tat&ldquo; celou hru? - pro prvn&iacute; tah b&iacute;l&eacute;ho  je 20 mo&#382;nost&iacute;, pro tah &#269;ern&eacute;ho u&#382; je to 400&hellip;. &nbsp;brzy dojdeme k &#269;&iacute;sl&#367;m  na kter&eacute; nesta&#269;&iacute; sou&#269;asn&yacute; v&yacute;po&#269;etn&iacute; v&yacute;kon. </li> <li>pouziva se databaze her - cca milon zapasu se vejde na CD</li> <li>Zah&aacute;jen&iacute; program obvykle vyb&iacute;r&aacute; z datab&aacute;ze, stejn&#283; tak koncovky s  posledn&iacute;mi kameny jsou propo&#269;&iacute;tan&eacute; </li> <li>3,4,5 kamenove pozice (tj. zbyva tento pocet kamenu ve hre) ma 1GB</li> <li>7 kamenove koncovky uz maji 18TB a uz zacinaji byt neprakticke </li></ul>",https://dynatrace-my.sharepoint.com/:p:/p/lubomir_petera/ETny2A8aSVZDuTjfpvW-DtgBpSAh8yVdwZGA3OrB4_Fvew?e=73LKDR,https://youtu.be/sLVu-3tye58Zdeněk Henek,Geografické informační systémy,https://www.vrablik.org,"<ul> <li>kdy&#382; se zept&aacute;te z&aacute;kazn&iacute;ka, &#345;ekne &#382;e chce vid&#283;t v&scaron;echno, co&#382;  obvykle nefunguje </li> <li>volba zobrazen&iacute; dle d&#367;le&#382;itosti, zoomu, agregace dle regionu, heatMapy&hellip; </li> <li>dal&scaron;&iacute; zjednodu&scaron;ov&aacute;n&iacute; pro rychlej&scaron;&iacute; render a men&scaron;&iacute;  p&#345;enos </li> <li>validace</li> <li>je d&#367;le&#382;it&eacute; jak je polygon zadan&yacute; (clockwise vs counterclockwise) - kanonizace </li> <li><a   href=""https://www.google.com/url?q=http://www.mapshaper.org&amp;sa=D&amp;source=editors&amp;ust=1668286179707271&amp;usg=AOvVaw3P3q-iUmY7O3hh4VPZ9SvQ"">www.mapshaper.org</a>&nbsp;program pro zjednoduseni geometrickych dat</li></ul>",https://docs.google.com/presentation/d/1Z2a2-j0GTgB8UW1yq4hdmQqM4S7v2uCjbSzCiEoYI-U/edit#slide=id.p,https://youtu.be/0Dein5qULAgVíťa Plšek,Jak testujete webové aplikace?,https://vitaplsek.cz,"<ul> <li>testy nad mocky casto nedavaji vubec smysl</li> <li>diky pouziti frameworku neni casto co unitove testovat</li> <li>vlastne pisu hlavne e2e testy, take hodne pisu testy na datove vrstve, ktere overuji slozite dotazy do databaze </li> <li>zacinam tim, ze napisu testy podle akceptacnich kriterii a leckdy jen proti mockove implementaci, kterou  postupne nahrazuji uplnou implementaci </li> <li>e2e testy jsou dobre, ale je nutne jejich psani nejak zjednodusit </li></ul>",https://drive.google.com/open?id=1jog3IR1KkNoqHXVbMYxpaKoT1sJ0lpQr&authuser=winsik.cz%40gmail.com&usp=drive_fs,https://youtu.be/iVCgMsKIGksPetr Filip,JSONata,https://github.com/petrfilip,"<ul> <li><a   href=""https://www.google.com/url?q=https://jsonata.org&amp;sa=D&amp;source=editors&amp;ust=1668286179709487&amp;usg=AOvVaw2INLOmDWNQPohtz1fRGD1M"">https://jsonata.org</a> </li> <li>uzasny deklarativn&iacute; jazyk na zpracovani JSON i pro neprogramatory</li> <li>umo&#382;&#328;uje agregace, funkce, jednoduche skriptovani</li> <li>vhodn&eacute; pro transformace, reporty, monitoring</li> <li>nativni implementace je v JavaScriptu, existuje Java port ale neni uplne dokonaly - nektere funkce se tam musi  drobne zjednodusovat </li></ul>",https://docs.google.com/presentation/d/1FsKxsU8FKFCKsc0qoxJZJljkz6ckERmCcVIhoM68Qk0/edit?usp=sharing,https://youtu.be/nXKSk9pPxHsVladka Janu,IPFS,https://twitter.com/vladkax,"<ul> <li>interplanetarni file system</li> <li>v roce 2017 v Turecku zablokovali Wikipedii</li> <li>centralizovany pristup k datum je spatny protoze jej mohou diktatori ovlivnovat </li> <li>IPFS umoznuje decentralizovane zpristupnovat informace a obchazet blokace </li> <li>peer to peer system, na ktery neni jednoduche aplikovat globalni pravidla pro blokace </li> <li>nevyhoda je, ze data o ktera nema nikdo zajem casem zmizi, proto je nutne resit tzv. pinovani - napr. pres  server pinata </li> <li>nema to privatni soubory - vsechno je proste verejne, lze obchazet sifrovanim, ale to uz neni nijak podporovano  ze strany IPFS </li> <li>neni jeste takova podpora v prohlizecich ale zlepsuje se</li> <li>system umi vyhledat konkretni soubory dle jejich kodu</li> <li>IPFS umi obchazet problemy na siti (NAT a podobne), takze se k datum da dostat skutecne odkudkoliv </li> <li>data jsou immutable a na soubory se odkazujeme pomoci hashe, ktery reprezentuje obsah tohoto souboru </li> <li>pro ukladani struktury se pouziva merkle tree - hashovy strom </li> <li>merkle tree pouziva i Git</li> <li>umi rozdelit i jeden soubor na vice nezavislych bloku, se kterymi pracuje nezavisle </li> <li>ma podporu i pro adresarove struktury, lze tedy mountovat do FS </li> <li>OrbitDB je databaze postavena nad IPFS, pro ukladani souboru lze pouzit i FileCoin </li></ul>",https://tinyurl.com/xvladka,https://youtu.be/5RMXSI2HO-wPetr Ferschmann,Ajťáci pomáhají na bojišti,https://twitter.com/fersman,"<ul> <li>na zacatku byly levne tablety s offine mapami</li> <li>vznikal dost zivelne a agilne</li> <li>puvodni system se jmenoval Kropyva, nove GIS Arta</li> <li>vojak v tabletu vidi zname pozice nepritele, muze si objednat delostreleckou palbu </li> <li>Rusko znicilo satelitni system viasat, ukrajinci presli na Starlink a tim tento problem obesli </li> <li>ziskavaji data pres drony, radarove systemy, fyzicke vojaky v poli, vyzvedne satelity atp. </li> <li>realne jsou schopni do 1 minuty strilet na misto dle objednavky z bojiste </li> <li>obchazeji detekci bateriove strelby tim, ze strili z ruznych pozic ale synchronizuji strelbu </li> <li>Nato vraci strelbu asi za 20 minut (overuje zda to neni od svych jednotek/ civiliste ) </li> <li>Rusko vraci strelbu az cca za hodinu</li> <li>prevzali rizeni NATO, kde jsou jednotky velmi autonomni a veleni urcuje jenom high-level strategii </li></ul>",https://docs.google.com/presentation/d/1Vmcn2oBRXBc68bs_f4celEFGJPSfhT_g2782UuCjDgc/edit#slide=id.g1415e1b008a_0_44,https://youtu.be/oN6peM4tOrkDavid Ondřich,Skutečnost neexistuje,https://dond.cz,"<ul> <li>clovek ma nekvalitni senzoriku, clovek ma asi 10, v prirode u zvirat existuje asi 26 celkem </li> <li>na vstupu ma clovek velmi mnoho sumu, ktery filtruje mozek (podobne jako AI) </li> <li>umele inteligenci by se mela rikat umela intuice</li> <li>cloveku nejde pravdepodobnostni matematika</li> <li>kazdy jedinec zije ve vlastnim modelu pochopeni a vnimani sveta, ktery se navic meni v case </li> <li>casto zijeme pribehy (a podlehame predsudkum)</li> <li>vn&iacute;m&aacute;n&iacute; = bias+ &scaron;um + iluze</li> <li>flashable memories = 75% respondent&#367; zapomn&#283;lo p&#345;i vypl&#328;ov&aacute;n&iacute; dotazn&iacute;ku  po del&scaron;&iacute; dob&#283;, &#382;e vypl&#328;ovali dotazn&iacute;k t&yacute;den po trag&eacute;dii (hav&aacute;rie  Challengeru) </li> <li>problem pribehu je v tom, ze z nich vyvozujeme kauzalitu, ale ono se obvykle jedna jen o korelaci (nahoda) </li> <li>kazdy dostatecne komplexni system je neustale alespon castecne rozbity (neznamy inzenyr NASA), dalsi zminky The  Myth of the Root Cause, Mathias Lafedt a dalsi (viz. prezentace) </li></ul>",https://docs.google.com/presentation/d/1anzQOex5_EMNPvBW4Vy7zWDWrI_S-rjWnLhqfZR1ygk/edit?usp=sharing,https://youtu.be/GJogsrWLNY4Tomáš Záluský,Od SQL k Cypheru,https://twitter.com/tomaszalusky,"<ul> <li>Cypher je dotazovaci a DDL jazyk</li> <li>snazi se opticky napodobovat uzly a hrany (analogie k ASCII art) </li> <li>dotazem prochazeji tuples (n-tice), ktere predstavuji uzly, relace atp, ktere musi splnovat &ldquo;match  patterny&rdquo; </li> <li>je velmi analogicka k Java streamum</li></ul>",https://docs.google.com/presentation/d/1VEN9F0NO7I4QkLIKeU2KEnRzy7Ln6-j94dC2Ib7dR6s/edit#slide=id.p,https://youtu.be/O9T-8ax3HFUHonza Novotný,EvitaDB,https://blog.novoj.net,"<p>Tvorba vlastn&iacute; dom&eacute;nov&#283; specifick&eacute; datab&aacute;ze, s c&iacute;lem vy&scaron;&scaron;&iacute;ho v&yacute;konu oproti existuj&iacute;c&iacute;m &#345;e&scaron;en&iacute;m. Domain specific datab&aacute;ze se vyskytuj&iacute; &#269;&iacute;m d&aacute;l &#269;ast&#283;ji, z&#345;ejm&#283; je to sm&#283;r co d&aacute;v&aacute; smysl.</p><p>V&yacute;konnostn&iacute; testy &#345;e&scaron;en&iacute; (EvitaDB - nejlep&scaron;&iacute; &scaron;k&aacute;lov&aacute;n&iacute;) vs PostgreSQL (nejhor&scaron;&iacute; &scaron;k&aacute;lov&aacute;n&iacute;) vs ElasticSearch (o trochu lep&scaron;&iacute; ne&#382; samotn&eacute; PostgreSQL, ale o &#345;&aacute;d hor&scaron;&iacute; ne&#382; EvitaDb) ana datech Senesi Datasetu</p><ul> <li>120000 entit</li></ul><p></p><p>PostgreSQL implementace</p><ul> <li>pro rychlost vyhled&aacute;v&aacute;n&iacute; ob&#283;tovat norm&aacute;ln&iacute; formu, a vyhled&aacute;v&aacute;nou  entitu ulo&#382;it jako blob do jedin&eacute;ho bin&aacute;rn&iacute;ho sloupce </li> <li>pro 4x zrychlen&iacute; prvotn&iacute;ho napln&#283;n&iacute; db pou&#382;&iacute;t inversion of data loader  pattern - inserty pouze v pam&#283;ti, pak hromadn&#283; batch update </li> <li>Vyu&#382;it&iacute; CTE (Common table expression) n&aacute;stroje </li></ul><p>Elastic search implementace</p><ul> <li>Nepoda&#345;ilo se do&#345;e&scaron;it ulo&#382;en&iacute; dokumentu jako jednu entitu, bylo nutn&eacute; ho ulo&#382;it  do v&iacute;ce entit. To pak p&#345;in&aacute;&scaron;elo dost probl&eacute;m&#367;. </li> <li>Neexistenci DB sekvence vy&#345;e&scaron;ilo vyu&#382;it&iacute; &#269;&iacute;sla revize speci&aacute;ln&iacute;ho  dokumentu, kter&eacute; se opakovan&#283; updatoval a t&iacute;m se zvy&scaron;ovala jeho revize, kter&aacute;  se pak pou&#382;&iacute;vala jako prim&aacute;rn&iacute; kl&iacute;&#269;/id jin&yacute;ch entit. </li> <li>nebylo mo&#382;n&eacute; implementovat &ldquo;not have a facet&rdquo; query </li> <li>nebylo mo&#382;n&eacute; spo&#269;&iacute;tat kombinovan&eacute; AND/OR dotazy na cenu a kategorii </li> <li>Probl&eacute;my s pam&#283;t&iacute; - kdy&#382; elastiku dojde pam&#283;&#357;, tak proces um&#345;e. </li></ul><p>EvitaDb</p><ul> <li>Fyzicky data ukl&aacute;d&aacute; pomoc&iacute; Kryo knihovny, co&#382; je key value store, datab&aacute;ze jako  takov&aacute; b&#283;&#382;&iacute; v pam&#283;ti. </li> <li>Vyu&#382;&iacute;v&aacute; Roaring Bitmaps pro bitov&eacute; operace.</li></ul><p><a  href=""https://www.google.com/url?q=http://evitadb.io&amp;sa=D&amp;source=editors&amp;ust=1668286179718654&amp;usg=AOvVaw2OYvglIF75Nd0Auf6k_vFb"">http://evitadb.io</a></p>",https://bit.ly/evita_prototype,https://youtu.be/015ttJIV858Ondřej Šika,Náhrada shell scriptů pomocí CLI toolu v Go,https://sika.io,"<ul> <li>git repo s bash skripty - moc nefunguje</li> <li>r&#367;zn&eacute; druhy bash/zhs/&hellip;</li> <li>nic moc jazyk pro slo&#382;it&#283;j&scaron;&iacute; v&#283;ci </li> <li>neexistuj&iacute; SDK</li> <li>ne v&scaron;ude je git</li> <li>Python - jsou ruzne verze, nektere problemy resi, jine prinese </li> <li>GO nepotrebuje pro svuj beh nic / vystupem je jedna binarka, ktera ma vse, co potrebuje </li> <li>vystupem jsou binarky pro vsechny typy architektur a OS</li> <li>GO ma spustu SDK nativne</li> <li>skvele jsou vsechny nastroje okolo (v ekosystemu)</li> <li>Goreleaser: zbuildi pro ruzne platformy, zabali do dockeru, nebo udela package pro dany system, uploaduje na  github / gitlab </li></ul><strong>Tooling</strong><p>cobra a viper knihovny</p><p>SikaLabsUtils (Slu) - <a  href=""https://www.google.com/url?q=https://github.com/sikalabs/slu&amp;sa=D&amp;source=editors&amp;ust=1668286179720752&amp;usg=AOvVaw26kYzzs6wRj-0ZXlwiGYvQ"">https://github.com/sikalabs/slu</a></p>",https://docs.google.com/presentation/d/1mcbs4Pf_WrUsVywfAQbZil4IoMaaO9bKQLmG4qWKQZI/edit?usp=sharing,https://youtu.be/aF6EKojQTA4David Matějček,"Jakarta EE vs. Technický dluh",https://omnifish.ee/,"<ul> <li>Java EE - vznikalo ve velkem tempu s mnohem horsim HW a toolingem </li> <li>Oracle se pokusil o zmeny, ale skoncil tak v puli cesty</li> <li>pak to vzal a to monstrum predal nadaci Eclipse</li> <li>Payara vypadala dynamicky, ale implementovala plno veci, co zakaznici pozadovali ale casto to skoncilo v  nedotazenem stavu </li> <li>Glassfish jako prvni prochazi TCK JakartaEE 10</li> <li>rocni vydavani verzi - prechod na JDK17</li></ul>",https://docs.google.com/presentation/d/1d-z-K8QqyVq6fbcvlR_tnsLoRqPGeDB1L_aWjR9DQzE/edit?usp=sharing,https://youtu.be/TbhdywofiEQMichal Augustýn,gRPC prakticky,https://twitter.com/AugiCZ,"<ul> <li>dom&eacute;nov&eacute; objekty jsou ve stejn&eacute; slo&#382;ce jako .proto soubory, tak&#382;e se navz&aacute;jem  m&#367;&#382;ou referencovat. Pak se z nich generuj&iacute; knihovny pro r&#367;zn&eacute; jazyky - Java,  javascript, s mo&#382;nost&iacute; zavolat konkr&eacute;tn&iacute; microservice pomoc&iacute; t&eacute;to  knihovny </li> <li>monorepo pattern - jeden reposit&aacute;&#345; pro celou firmu </li> <li>existuje tak&eacute; &ldquo;monolit first pattern&rdquo;</li> <li>gRPC cca 5x rychlej&scaron;&iacute; ne&#382; GraphQL (Novoj&#367;v &ldquo;echo service&rdquo; test) </li> <li>Google protocol buffers (bin&aacute;rn&iacute;=datov&#283; &uacute;sporn&#283;j&scaron;&iacute; alternativa k  textov&eacute;mu JSON) + Http v2.0 </li> <li>gRPC (vs REST) v&yacute;hoda - existuje popis toho, co za data te&#269;e v komunikaci, je vhodn&yacute; pro  intern&iacute; komunikaci mezi microservices v r&aacute;mci jednoho projektu </li> <li>graphQL v&yacute;hoda - developer p&#345;&iacute;v&#283;tiv&#283;j&scaron;&iacute;, query language na tah&aacute;n&iacute;  dat, jin&yacute; usecase ne&#382; gRPC </li> <li>Buf <a   href=""https://www.google.com/url?q=https://buf.build/&amp;sa=D&amp;source=editors&amp;ust=1668286179723384&amp;usg=AOvVaw1UU4cAOtacs-qjmT_7Y-YE"">https://buf.build/</a>&nbsp;nastroj  pomaha pri sprave a vyvoji grpc api </li></ul>",https://docs.google.com/presentation/d/1sfmrqNA0AGcKizkFAJjfqx5p_iNQ5dDhmB6qOq6rYsw/edit?usp=sharing,https://youtu.be/YsZgrhimF5gMichal Těhník,Staff Engineering,https://twitter.com/MicTech,"<p>Metodiky</p><ul> <li>Trident model</li></ul><ul> <li>management (&#345;&iacute;d&iacute; lidi)</li> <li>Individual Contributor (IC - v&yacute;voj&aacute;&#345;i)</li> <li>Technical (garanti, zast&#345;e&scaron;uj&iacute; technicky + sv&yacute;m know-how &#345;e&scaron;en&iacute;) </li></ul><ul> <li>Robin Pokorn&yacute; model</li></ul><ul> <li>Expert track, Tech lead track, Engineering Track, management track</li></ul><p>IC leadership - &#345;e&scaron;&iacute;/motivuje &#345;e&scaron;en&iacute; technick&eacute;ho dluhu, p&#345;echod na nov&eacute;, efektivn&#283;j&scaron;&iacute; technologie, nahrazov&aacute;n&iacute; monolitu v&#283;t&scaron;&iacute; modularitou a dal&scaron;&iacute; long-term investment v&yacute;vojov&eacute; aktivity</p><p>staffeng.com</p><p>Remark from audience: Peter&rsquo;s principle - by promoting developers to higher, often management positions, can lead to situation when people change from someone bringing big benefit to company as SW engineer to doing management job for which is not competent/efficient.</p>",https://docs.google.com/presentation/d/1usJ_HlAJZekZBjbxCfvFF6QpaOaoTD3Xt-KPEKBp57g/edit#slide=id.g162f841257d_0_14,https://youtu.be/WQs4XxaywjMVojta Růžička,Uzitecne nastroje nejen pro blogovani,https://www.vojtechruzicka.com,"<ul> <li>  Netlify-analytics: server side analytika (funguje bez JS, bez cookies)<br><a   class=""c5""   href=""https://www.google.com/url?q=https://www.vojtechruzicka.com/netlify-analytics&amp;sa=D&amp;source=editors&amp;ust=1668286179725883&amp;usg=AOvVaw1wwJDZQSkoK2ATxichYhOS"">https://www.vojtechruzicka.com/netlify-analytics</a> </li> <li>Staticman: reseni komentaru na blogu (umoznuje embedovat komentare do statickeho html), komentare jsou pak  soucasti verzovanych zdrojaku v Gitu<br><a    href=""https://www.google.com/url?q=https://www.vojtechruzicka.com/static-man&amp;sa=D&amp;source=editors&amp;ust=1668286179726235&amp;usg=AOvVaw3LYwO5vYg-c78l3nWAtJCp"">https://www.vojtechruzicka.com/staticman</a> </li> <li>Grammarly umoznuje kontrolu pravopisu a gramatiky v textu</li> <li>WarbleAlerts: monitoring socialnich siti na klicova slova (pro Twitter)</li> <li>ContentKing: SEO monitoring a auditing, sleduje i performance, propady ve vyhledavatelnosti, tipy na vylepseni </li> <li>Monitorbacklinks: prehled zpetnych odkazu, zcizeni obsahu, inflow uzivatelu z daneho zdroje </li></ul>",https://docs.google.com/presentation/d/1i5rxwgXn8TO-CpMqOADiCW8y46ihLuF-S2NJzIjbsCw/edit?usp=sharing,https://youtu.be/fj4IhhiYUGoJiří Kadlec,Java Virtual Threads,https://www.linkedin.com/in/ji%C5%99%C3%AD-kadlec-10237753/,"<ul> <li>preview featura JDK19</li> <li>starsi java ma Thread rizeny OS, 1MB pameti per thread mimo heap, ridi system, vyzaduje context switche </li> <li>stejny interface jako Thread</li> <li>nove jeden carrier thread rizeny OS realne provadi mnoho virtual threadu</li> <li>na pozadi fork/join pool</li> <li>stare reseni pri threadpoolu 500 a tasku ktery waituje po dobu 1s, execute trvalo 20s a vyzadalo 200MB </li> <li>nove reseni bezi 1s a vyzaduji 80MB</li> <li>nepouzivat Thread pools</li> <li>nepouzivat ThreadLocals (nasobi se velkym mnozstvim virtual threads)</li> <li>nepouzivat sychronized klauzule ale ReentrantLocky</li> <li>vhodne pouzivat Semafory pro omezovani pristupu k I/O resourcum, abychom je nezahltili requesty </li></ul>",https://docs.google.com/presentation/d/1xLs2gEhZsoGyszzSv_FDeueKbb1DEBBG-pvLkEUnBOM/edit?usp=sharing,https://youtu.be/wxHBg8fYXuAKamil Ševeček,Java a nativní knihovny,https://www.linkedin.com/in/kamil-sevecek/,"<p>Na za&#269;&aacute;tku javy byla idea pokr&yacute;t v&scaron;echny slu&#382;by OS v JavaAPI, od toho se sp&iacute;&scaron; ustoupilo, JavaAPI dnes pokr&yacute;v&aacute; sotva &frac14; OS API. Proto se ob&#269;as m&#367;&#382;eme setkat s pot&#345;ebou volat nativn&iacute; k&oacute;d/knihovnu z Javy</p><p></p><p>Jak volat nativn&iacute; (C&#269;kov&yacute;) k&oacute;d, co existuje &nbsp;v OS?</p><ol> <li>JNI call - deklarace native metody + naps&aacute;n&iacute; a zkompilov&aacute;n&iacute; C&#269;kov&eacute;  &ldquo;wrapper&rdquo; knihovny, pracuj&iacute;c&iacute; s nativn&iacute;m C&#269;kovou knihovnou<br>:( Javista  mus&iacute; ps&aacute;t C&#269;kov&yacute; Wrapper<br>:) nejv&#283;t&scaron;&iacute; kontrola nad efektivitou a  pam&#283;t&iacute; </li> <li>JNA - Java Native Access</li></ol><ol> <li>com.sun.jna.Structure =&gt; mapuje se na C&#269;kov&eacute; typedef struct<br>:) je vid&#283;t v Jav&#283;<br>:(  obsah se kop&iacute;ruje z a do JVM pam&#283;ti p&#345;i vol&aacute;n&iacute; metody </li> <li>com.sun.jna.PointerType - siln&#283; typovan&yacute; objekt, mapuje se na extern&iacute; C&#269;kov&yacute;  objekt v pam&#283;ti p&#345;es pointer<br>:) efektivn&iacute;<br>:( v JVM jako blob </li></ol><ol> <li>JEP: Foreign function &amp; Memory API - new in Java 19 (v preview, nutn&eacute; aktivovat) </li></ol><ol> <li>V&yacute;hody JNI, JNA</li> <li>V&yacute;hody ByteBuffer</li> <li>jextract - autogener&aacute;tor C headers =&gt; Java</li></ol><p></p><p>java.nio.ByteBuffer - alokace pam&#283;ti OS mimo JVM (obdoba C&#269;kov&eacute;ho malloc)</p><p>allocateDirect(int capacity)</p><p>public byte get(int index)</p><p>public ByteBufffer put(int index, byte data)</p><p></p><p>Jak ps&aacute;t plo&scaron;inovku?</p><ul> <li>Java + SDL (C)</li> <li>Java + Java 2D (Swing lze dost optimalizovat)</li></ul>",https://1drv.ms/p/s!AqDwHcjuB-vMgSwLx6L8Kjy-YC5Z?e=BLAUs7,https://youtu.be/61gi3f--E9oAleš Rybák,Se Stringem to není jednoduché,https://github.com/AlesRybak/,"<ul> <li>String.length pro emotikony neocekavane vratil dvojnasobnou delku </li> <li>UTF-8 a UTF-16 ma variable length</li> <li>UTF-32 ma fixed length na 4B</li> <li>String length vraci pocet char&#367; (ale ne unicode code units) - pokud se znaky vlezou do prvni casti znaku  (unicode basic plain) tak se znak pocita za jeden, pokud v druhe (cast emotikonu) - tak uz se vraci dva </li> <li>Emotikony lze dokonce kombinovat pomoci znaku &ldquo;zwidge&rdquo;, ktery je pak muze nejak interpretovat -  ovsem stale to jsou dva ruzne emotikony a znak zwidge, takze jeden smailik muze mit length 6 nebo i 12 apod,  takze pozor :) </li></ul>",https://docs.google.com/presentation/d/1x7tA7DDQXBSg4CeZ7oU5jcyiLJF4A_AxrxJNHdAU9k0/edit?usp=sharing,https://youtu.be/9IwIm-ED9SQVáclav Pech,Trendy v JetBrains IDE,https://twitter.com/vaclav_pech,"<ul> <li>soucasne UI je velmi podobne UI z verze 1.1 (ktere melo tedy mnohem mene funkci) </li> <li>new UI - positive user feedback (very happy 53%, somewhat happy 34% unhappy 7%) </li> <li>integrovany remote development</li> <li>vedle se vyviji uplne novy editor Fleet napsany from scratch</li> <li>je velice rychly - v zakladnim rezimu funguje jen jako obycejny editor a muze se prepnout do rezimu jazykove  podpory, kde teprve potrebuje indexy </li> <li>indexovani je napsane v Rustu</li></ul>",https://docs.google.com/presentation/d/1VDdLnvnLXFr7Y921MZec689VZRo30aSnM5K6K4PjbbU/edit?usp=sharing,https://youtu.be/JH0YZc_ogTUPavel Jetenský,Produktivita v IntelliJ Idea,https://www.linkedin.com/in/paveljetensky/,"<ul> <li>pom&#283;r &#269;ten&iacute;:psan&iacute; k&oacute;du je 10:1 </li> <li>Ctrl+Shift+Backspace sko&#269; na posledn&iacute; m&iacute;sto editace</li> <li>F2/Shift + F2 - sko&#269; na chybu</li> <li>CamelCase a &lsquo;*&rsquo; p&#345;i otev&iacute;r&aacute;n&iacute; t&#345;&iacute;d (Control + N) nebo soubor&#367;  (Control + Shift +N) </li> <li>Drop frame</li> <li>Live templates</li> <li>Surround with&hellip;</li> <li>Pomoc&iacute; Intentions (Alt + Enter) lze nagenerovat neexistuj&iacute;c&iacute; volan&eacute; metody </li></ul>",https://bit.ly/ideaproductivity,https://youtu.be/VysSYBlL48gIvo Musil,Starý Ops Dev Sec hraje Kubernetes,https://www.linkedin.com/in/ivosh/,"<ul> <li>zkusenosti s problemy, ktere vznikaji aplikaci pristupu 20. stoleti na technologie 21. stoleti </li> <li>kombinace security, ops a dev ve stejnem tymu pri implementaci aplikace provozovane v Kubernetes </li></ul>",https://tinyurl.com/jos2022-ivoshm,https://youtu.be/UGMpz2z3A90Milan Lempera,Data oriented programming,https://blog.lempera.cz,"<ul> <li>oddelit data a kod</li> <li>immutabilni datove struktury (pouziti persistentnich datovych struktur)</li> <li>popis dat pomoci JSON schematu, ze schematu je mozne generovat TypeScript </li></ul>",https://docs.google.com/presentation/d/1q_D3fKILhEav5mskRqCqocMiMHRtvaUg9r3iz6B8vZA/edit#slide=id.g123d594b28d_0_90,https://youtu.be/lL3qzw8BHbsMartin Tošovský,JVM Jazyky známé i neznámé,https://www.linkedin.com/in/martin-tosovsky/,"<ul> <li>porty jinych jazyku - JRuby, Jython</li> <li>vylepseni Javy - Kotlin, Groovy, Scala, Xtend, Gosu</li> <li>unikatni jazyky: X10 (parallel computing), Cypher</li></ul><ul> <li>Funtom: mixiny, immutability, nullable typy, clojures, concurrency (actor based), literaly </li> <li>Gosu: pascal like deklarace, properties, smart casty, null-safe operatory, extenze zakladnich typu </li> <li>Ceylon: immutable, null safety, generics (reified, unions), named arguments, mudule system </li> <li>XTend: pouze dialekt Javy, featury podobne ostatnim jazykum, dispatch metody </li> <li>Ballerina: vsechno co v predchozich, podpora pro vstup dat z ruznych datovych formatu (JSON, XML &hellip;),  dokaze generovat sekvencni diagram </li> <li>OSTRAJava</li></ul>",https://docs.google.com/presentation/d/1olGUm4FSi8sIMxrWY9B4VKZ-9hDB_Ow0GLdGZLuH12Y/edit?usp=sharing,https://youtu.be/ki_ioCGUVMA